{"uid":"75654b6ee2a8bdc3","name":"Validate the sample limits of Nitrosamine residue verification for direct bop","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_nitrosamine_residue_sample_limits_direct_bop","historyId":"c31f7d2560b734a8d212369850740990","time":{"start":1733031671682,"stop":1733031675379,"duration":3697},"description":"This test case tests API to Create Protocol for Nitrosamine residue verification and validate the sample limits when select based on policy for direct","descriptionHtml":"<p>This test case tests API to Create Protocol for Nitrosamine residue verification and validate the sample limits when select based on policy for direct</p>\n","status":"broken","statusMessage":"KeyError: 'Nitrosamine Name'","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000001771F027850>\n\n    @allure.title(\"Validate the sample limits of Nitrosamine residue verification for direct bop\")\n    @allure.description(\"This test case tests API to Create Protocol for Nitrosamine residue verification and validate \"\n                        \"the sample limits when select based on policy for direct\")\n    @allure.link(\"https://app.clickup.com/t/86cumc4wx\")  # bop = based on policy\n    @pytest.mark.validate_nitrosamine_residue_sample_limits_direct_bop\n    def test_validate_nitrosamine_residue_sample_limits_direct_bop(self):\n        data = self.test_create_protocol_nitrosamine_residue_verification_based_on_policy()\n        equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"],\n                         \"columns\": self.EXCELS_COLUMNS,\n                         \"sample_type\": \"Nitrosamine\", \"bop_type\": \"based_on_policy\"})\n            get_sample_limits = \\\n                self.protocol_common_method.get_sample_limits_protocol_residue_verification_protocol(data)[\n                    \"response\"]\n            sample_limits = json.loads(get_sample_limits)[\"result\"]\n            data.update({\"sample_profile\": sample_limits})\n>           self.protocol_nitrosamine.compare_samples_swab_rinse_sample_limits_nitrosamine(data)\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_prodcution_protocol.py:2964: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.protocols.protocol_nitrosamine_residue_verification.ProtocolNitrosamineAcceptanceCriteria object at 0x000001771EF64C50>\ndata = {'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'externalId': 'Protocol-RIFN', 'nam... area(sqcm)', 'Rinse volume(ml)', 'rinse_limit_ppm', 'swab_limit_ppm', ...], 'description': 'Automation Protocol', ...}\n\n    def compare_samples_swab_rinse_sample_limits_nitrosamine(self, data):\n        if data[\"bop_type\"] == \"based_on_policy\":\n            sheet_name = \"nitrosamine_sample_limits\"\n        else:\n            sheet_name = \"nitro_sample_limits_custom\"\n        sample_limits = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name,\n                                                                self.columns, data[\"sample_type\"])\n        swab_area = [item for item in sample_limits[\"swab_limit_ppm\"] if item != '#VALUE']\n        rinse_vol = [item for item in sample_limits[\"rinse_limit_ppm\"] if item != '#VALUE']\n        sample_ids = [item for item in sample_limits[\"sample id\"] if item != '#VALUE!']\n>       nitrosamine_id = [item for item in sample_limits[\"Nitrosamine Name\"] if item != '#VALUE']\nE       KeyError: 'Nitrosamine Name'\n\ntests\\unit\\protocols\\protocol_nitrosamine_residue_verification.py:253: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733031671231,"stop":1733031671515,"duration":284},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733031671515,"stop":1733031671679,"duration":164},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_nitrosamine_residue_sample_limits_direct_bop"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"26344-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cumc4wx","url":"https://app.clickup.com/t/86cumc4wx","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_nitrosamine_residue_sample_limits_direct_bop","multi_production_protocol","scenario"]},"source":"75654b6ee2a8bdc3.json","parameterValues":[]}