{"uid":"7617308724bf774e","name":"Validate the bioburden residue verification final summary page","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_final_summary_bioburden_residue_verification_details","historyId":"7f8c0447e618954e5127e06c76a3f4e8","time":{"start":1734436249658,"stop":1734436275168,"duration":25510},"description":"This test case tests API to Create Protocol for bioburden residue verification and validate the final summary details","descriptionHtml":"<p>This test case tests API to Create Protocol for bioburden residue verification and validate the final summary details</p>\n","status":"failed","statusMessage":"AssertionError: Rinse volume from protocol 1020 not equal to calculated data 1.3 for sample id EQM-3/BI-3","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x7f81b899c410>\n\n    @allure.title(\"Validate the bioburden residue verification final summary page\")\n    @allure.description(\"This test case tests API to Create Protocol for bioburden residue verification and \"\n                        \"validate the final summary details\")\n    @allure.link(\"https://app.clickup.com/t/86cumczx2\")\n    @pytest.mark.validate_final_summary_bioburden_residue_verification_details\n    def test_validate_final_summary_bioburden_residue_verification_details(self):\n        data = self.test_create_protocol_bioburden_residue_verification_based_on_policy_direct_indirect()\n        no_of_runs_payload = number_of_runs_sample_limits()\n    \n        data.update({\"no_of_runs_payload\": no_of_runs_payload})\n    \n        self.protocol_common_method.update_protocol_residue_verification_sample_limits_run(data)\n    \n        final_summary = self.protocol_common_method.get_active_final_summary_details(data)[\"response\"]\n    \n        equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"],\n                         \"columns\": self.EXCELS_COLUMNS, \"sample_type\": \"Bioburden\"})\n            sample_limits = json.loads(final_summary)[\"result\"]\n            data.update({\"sample_profile\": sample_limits})\n            self.protocol_bioburden.compare_samples_swab_rinse_sample_limits_bioburden_summary(data)\n        eq_index = 0\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"], \"type\": \"Bioburden\"})\n            sample_limits = json.loads(final_summary)[\"result\"]\n            data.update({\"sample_profile\": sample_limits, \"eq_length\": eq_index})\n            eq_index += 1\n>           self.protocol_bioburden.compare_samples_swab_rinse_surface_area_bioburden_summary(data)\n\ntests/scenarios/multi_production_protocol/protocol/test_multi_prodcution_protocol.py:3774: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'externalId': 'Protocol-S21S', 'nam... area(sqcm)', 'Rinse volume(ml)', 'rinse_limit_ppm', 'swab_limit_ppm', ...], 'description': 'Automation Protocol', ...}\n\n    @staticmethod\n    def compare_samples_swab_rinse_surface_area_bioburden_summary(data):\n        sheet_name = data[\"external_id\"] + \"_samples_custom\"\n        sample_area = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name, data[\"columns\"],\n                                                              data[\"sample_type\"])\n        sample_area_list = [item for item in sample_area[\"Sampling area(sqcm)\"] if item != '#VALUE!']\n        result_list = [item for item in sample_area[\"rinse_volume\"] if item != '#VALUE!']\n        sample_ids = [item for item in sample_area[\"sample id\"] if item != '#VALUE!']\n        swab_area_mapping = dict(zip(sample_ids, sample_area_list))\n        rinse_vol_mapping = dict(zip(sample_ids, result_list))\n        for profile in data['sample_profile']['samplingProfiles'][data[\"eq_length\"]]['samplingProfile'].values():\n            for sample in profile['samples'].values():\n                sample_id = sample.get('externalId')\n                if sample.get('type') == data[\"type\"] and sample_id in sample_ids:\n                    surface_area = sample.get('surfaceArea')\n                    rinse_volume = sample.get('rinseVolume')\n                    if surface_area is not None:\n                        assert round(surface_area, 3) == round(swab_area_mapping[sample_id], 3), \\\n                            (f\"Surface area from protocol {surface_area} not equal to calculated data \"\n                             f\"{swab_area_mapping[sample_id]} for sample id {sample_id}\")\n                    if rinse_volume is not None:\n>                       assert rinse_volume == rinse_vol_mapping[sample_id], \\\n                            (f\"Rinse volume from protocol {rinse_volume} not equal to calculated data \"\n                             f\"{rinse_vol_mapping[sample_id]} for sample id {sample_id}\")\nE                       AssertionError: Rinse volume from protocol 1020 not equal to calculated data 1.3 for sample id EQM-3/BI-3\n\ntests/unit/protocols/protocol_bioburden_residue_verification.py:755: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1734429604694,"stop":1734429605014,"duration":320},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1734429605014,"stop":1734429605194,"duration":180},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_final_summary_bioburden_residue_verification_details"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"1892009-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cumczx2","url":"https://app.clickup.com/t/86cumczx2","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["validate_final_summary_bioburden_residue_verification_details","multi_production_protocol","scenario"]},"source":"7617308724bf774e.json","parameterValues":[]}