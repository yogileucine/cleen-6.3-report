{"uid":"2c97356eb113f37f","name":"Create Inspection on Equipment & Validate the Bioburden Residue Verification Endotoxin Samplesfor surface area sqin and volume as l","fullName":"tests.scenarios.multi_production_protocol.inspection.test_multi_production_protocol_inspection_sqin_l.TestInspectionMultiProductionProtocolSqinl#test_create_inspection_validate_the_acceptance_limit_bioburden_sqin_l","historyId":"b50e23052f508270e63489fb2dc0a970","time":{"start":1733040068567,"stop":1733040069258,"duration":691},"description":"This test case tests API to create an inspection on equipment and validate the Bioburden residue verification bioburden samples for surface area sqin and volume as l","descriptionHtml":"<p>This test case tests API to create an inspection on equipment and validate the Bioburden residue verification bioburden samples for surface area sqin and volume as l</p>\n","status":"failed","statusMessage":"AssertionError: Acceptance limit from API response EQM-19/BI-2: 16.76652249856207 is not equal to calculated limits 16.766488965517244","statusTrace":"self = <test_multi_production_protocol_inspection_sqin_l.TestInspectionMultiProductionProtocolSqinl object at 0x00000251D0EF8ED0>\ninspection_setup_method = ({'acceptance_limit_dict': {'EQM-19/BI-1': 20, 'EQM-19/BI-2': 20, 'EQM-19/BI-3': 18, 'EQM-19/BI-4': 18, ...}, 'bioburd...'name': 'Protocol-VZZ1', ...}, 'additional_test': 'Conductivity', 'at_verification': 'conductivity_verification', ...})\n\n    @allure.title(\"Create Inspection on Equipment & Validate the Bioburden Residue Verification Endotoxin Samples\"\n                  \"for surface area sqin and volume as l\")\n    @allure.description(\"This test case tests API to create an inspection on equipment and validate the Bioburden \"\n                        \"residue verification bioburden samples for surface area sqin and volume as l\")\n    @allure.link(\"https://app.clickup.com/t/86cv0yd62\")\n    @pytest.mark.create_inspection_validate_the_acceptance_limit_bioburden_sqin_l\n    def test_create_inspection_validate_the_acceptance_limit_bioburden_sqin_l(self, inspection_setup_method):\n    \n        microbial_policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        microbial_policy = json.loads(microbial_policy)[\"result\"]\n    \n        direct_bioburden_swab = microbial_policy[\"direct\"]['bioBurden']['bioBurden']['swab']['unclassified'][\n            'bioBurden']\n        direct_bioburden_rinse = microbial_policy[\"direct\"]['bioBurden']['bioBurden']['rinse']['unclassified'][\n            'bioBurden']\n    \n        indirect_bioburden_swab = microbial_policy[\"indirect\"]['bioBurden']['bioBurden']['swab']['unclassified'][\n            'bioBurden']\n        indirect_bioburden_rinse = microbial_policy[\"indirect\"]['bioBurden']['bioBurden']['rinse']['unclassified'][\n            'bioBurden']\n    \n        inspection_data, equipment_info, protocol_equipment = inspection_setup_method\n        get_inspection = self.multi_production_study.get_single_study_details(inspection_data)[\"response\"]\n        get_inspection = json.loads(get_inspection)[\"result\"]\n    \n        for i in range(len(equipment_info)):\n            inspection_data.update({\"inspection_id\": get_inspection[\"inspections\"][i][\"id\"]})\n            inspection = self.multi_production_inspection.get_inspection_detail(inspection_data)[\"response\"]\n            inspection = json.loads(inspection)[\"result\"]\n    \n            self.multi_production_inspection.get_endotoxin_inspection_details(inspection_data)\n    \n            acceptance_limit_dict = {residue['bioburden']['sampleExternalId']: residue['bioburden']['acceptanceLimit']\n                                     for residue in inspection[\"bioburden\"][\"residues\"]}\n    \n            for j in range(len(inspection[\"bioburden\"][\"residues\"])):\n                sample_id = inspection[\"bioburden\"][\"residues\"][j][\"bioburden\"][\"sampleExternalId\"]\n                bioburden_residue = inspection[\"bioburden\"][\"residues\"]\n                inspection_data.update({\"external_id\": sample_id.split(\"/\")[0], \"sample_type\": \"Bioburden\",\n                                        \"sample_id\": sample_id,\n                                        \"acceptance_limit_dict\": acceptance_limit_dict,\n                                        \"bioburden_residue\": bioburden_residue,\n                                        \"protocol_equipment\": protocol_equipment,\n                                        \"direct_bioburden_swab\": direct_bioburden_swab,\n                                        \"direct_bioburden_rinse\": direct_bioburden_rinse,\n                                        \"indirect_bioburden_swab\": indirect_bioburden_swab,\n                                        \"indirect_bioburden_rinse\": indirect_bioburden_rinse})\n    \n>               self.multi_production_inspection.compare_bioburden_inspection_limits(inspection_data)\n\ntests\\scenarios\\multi_production_protocol\\inspection\\test_multi_production_protocol_inspection_sqin_l.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'acceptance_limit_dict': {'EQM-19/BI-1': 20, 'EQM-19/BI-2': 20, 'EQM-19/BI-3': 18, 'EQM-19/BI-4': 18, ...}, 'bioburde...['sample type', 'sample id', 'swab_rinse_ppm', 'Rinse volume(ml)', 'rinse_limit_ppm', 'Sampling area(sqcm)', ...], ...}\n\n    @staticmethod\n    def compare_bioburden_inspection_limits(data):\n        if data[\"protocol_equipment\"][\"direct_policy\"] is not \"custom\":\n            sheet_name = data[\"external_id\"] + \"_samples\"\n        else:\n            sheet_name = data[\"external_id\"] + \"_samples_custom\"\n        acceptance_limit = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name,\n                                                                   data[\"columns\"], data[\"sample_type\"])\n        sample_ids = [item for item in acceptance_limit[\"sample id\"] if item != '#VALUE!']\n    \n        rinse_vol = [item * const.CONVERT_ML_L if data.get(\"unit_volume\") == \"L\" else item\n                     for item in acceptance_limit[\"Rinse volume(ml)\"] if item != '#VALUE']\n    \n        rinse_vol_mapping = {sample_id: rinse for sample_id, rinse in zip(sample_ids, rinse_vol) if\n                             rinse != '#VALUE!'}\n    \n        if data.get(\"unit_data\") == \"sqm\":\n            swab_area = [item * const.CONVERT_SQCM_SQM for item in\n                         acceptance_limit[\"Sampling area(sqcm)\"] if item != '#VALUE!']\n        elif data.get(\"unit_data\") == \"sqin\":\n            swab_area = [item * const.CONVERT_SQCM_SQIN for item in\n                         acceptance_limit[\"Sampling area(sqcm)\"] if item != '#VALUE!']\n        else:\n            swab_area = [item for item in acceptance_limit[\"Sampling area(sqcm)\"] if item != '#VALUE!']\n    \n        swab_area_mapping = {sample_id: swab for sample_id, swab in zip(sample_ids, swab_area) if\n                             swab != '#VALUE'}\n        acceptance_limit_dict = acceptance_limit[\"sample id\"]\n        counter_index = 0\n        for key, value in data[\"acceptance_limit_dict\"].items():\n            if key in acceptance_limit_dict:\n                if key.endswith((\"/BI-5\", \"/BI-6\", \"/BI-7\", \"/BI-8\")):\n                    method_type = data[\"bioburden_residue\"][counter_index][\"bioburden\"][\"methodType\"]\n                    if method_type == const.SWAB:\n                        per_unit_area = data[\"bioburden_residue\"][counter_index][\"bioburden\"][\"perUnitArea\"][\n                            \"value\"]\n                        surface_area = data[\"bioburden_residue\"][counter_index][\"bioburden\"][\"surfaceArea\"]\n                        calculated_sample_limit = data[\"indirect_bioburden_swab\"][\"value\"] / data[\n                            \"indirect_bioburden_swab\"][\"perUnitAreaOrVolume\"][\"value\"] * swab_area_mapping[key]\n                        assert round(calculated_sample_limit, 3) == round(value / per_unit_area * surface_area, 3), \\\n                            (f\"Acceptance limit from API response {key}: {value / per_unit_area * surface_area} \"\n                             f\"is not equal to calculated limits {calculated_sample_limit}\")\n    \n                    if method_type == const.RINSE:\n                        per_unit_volume = data[\"bioburden_residue\"][counter_index][\"bioburden\"][\"perUnitVolume\"][\n                            \"value\"]\n                        am_rinse_volume = data[\"bioburden_residue\"][counter_index][\"bioburden\"][\"amRinseVolume\"][\n                            \"value\"]\n                        calculated_sample_limit = data[\"indirect_bioburden_rinse\"][\"value\"] / data[\n                            \"indirect_bioburden_rinse\"][\"perUnitAreaOrVolume\"][\"value\"] * rinse_vol_mapping[key]\n                        assert round(calculated_sample_limit, 3) == round(value / per_unit_volume * am_rinse_volume,\n                                                                          3), \\\n                            (\n                                f\"Acceptance limit from API response {key}: {value / per_unit_volume * am_rinse_volume}\"\n                                f\" is not equal to calculated limits {calculated_sample_limit}\")\n    \n                if key.endswith((\"/BI-1\", \"/BI-2\", \"/BI-3\", \"/BI-4\")):\n                    method_type = data[\"bioburden_residue\"][counter_index][\"bioburden\"][\"methodType\"]\n                    if method_type == const.SWAB:\n                        calculated_sample_limit = data[\"direct_bioburden_swab\"][\"value\"] / data[\n                            \"direct_bioburden_swab\"][\"perUnitAreaOrVolume\"][\"value\"] * swab_area_mapping[key]\n                        per_unit_area = data[\"bioburden_residue\"][counter_index][\"bioburden\"][\"perUnitArea\"][\n                            \"value\"]\n                        surface_area = data[\"bioburden_residue\"][counter_index][\"bioburden\"][\"surfaceArea\"]\n>                       assert round(calculated_sample_limit, 3) == round(value / per_unit_area * surface_area, 3), \\\n                            (f\"Acceptance limit from API response {key}: {value / per_unit_area * surface_area} \"\n                             f\"is not equal to calculated limits {calculated_sample_limit}\")\nE                       AssertionError: Acceptance limit from API response EQM-19/BI-2: 16.76652249856207 is not equal to calculated limits 16.766488965517244\n\ntests\\unit\\inspection_multi_production\\inspection_multi_production_protocol.py:314: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1733038443170,"stop":1733038443648,"duration":478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733038443648,"stop":1733038443948,"duration":300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"inspection_setup_method","time":{"start":1733039938429,"stop":1733040002460,"duration":64031},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"create_inspection_validate_the_acceptance_limit_bioburden_sqin_l"},{"name":"tag","value":"inspection_multi_production_protocol_sqin_l"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.inspection"},{"name":"suite","value":"test_multi_production_protocol_inspection_sqin_l"},{"name":"subSuite","value":"TestInspectionMultiProductionProtocolSqinl"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"25196-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.inspection.test_multi_production_protocol_inspection_sqin_l"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cv0yd62","url":"https://app.clickup.com/t/86cv0yd62","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1f64993698aa3bd0","status":"passed","time":{"start":1732976643350,"stop":1732976667287,"duration":23937}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["create_inspection_validate_the_acceptance_limit_bioburden_sqin_l","scenario","inspection_multi_production_protocol_sqin_l"]},"source":"2c97356eb113f37f.json","parameterValues":[]}