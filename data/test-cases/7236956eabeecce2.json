{"uid":"7236956eabeecce2","name":"Validate the endotoxin residue verification final summary page when unit is SQCM and L","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_final_summary_endotoxin_residue_verification_details_sqcm_l","historyId":"9b5506a6c0591aa01837a27cf5246a0d","time":{"start":1732979059992,"stop":1732979072604,"duration":12612},"description":"This test case tests API to Create Protocol for endotoxin residue verification and validate the final summary details when surface unit is SQCM and volume unit is L","descriptionHtml":"<p>This test case tests API to Create Protocol for endotoxin residue verification and validate the final summary details when surface unit is SQCM and volume unit is L</p>\n","status":"failed","statusMessage":"AssertionError: Sample ID: EQM-17/EN-1 - Failed (Rinse Limit 40 not match with calculated limit 40000.0 for sample id EQM-17/EN-1)","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000001CD0843C3D0>\n\n    @allure.title(\"Validate the endotoxin residue verification final summary page when unit is SQCM and L\")\n    @allure.description(\"This test case tests API to Create Protocol for endotoxin residue verification and \"\n                        \"validate the final summary details when surface unit is SQCM and volume unit is L\")\n    @allure.link(\"https://app.clickup.com/t/86cwdb8vp\")\n    @pytest.mark.validate_final_summary_endotoxin_residue_verification_details_sqcm_l\n    def test_validate_final_summary_endotoxin_residue_verification_details_sqcm_l(self):\n        data = self.test_create_protocol_endotoxin_residue_verification_based_on_policy_l()\n        no_of_runs_payload = number_of_runs_sample_limits()\n    \n        data.update({\"no_of_runs_payload\": no_of_runs_payload})\n    \n        self.protocol_common_method.update_protocol_residue_verification_sample_limits_run(data)\n    \n        final_summary = self.protocol_common_method.get_active_final_summary_details(data)[\"response\"]\n    \n        equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"],\n                         \"columns\": self.EXCELS_COLUMNS, \"sample_type\": \"Endotoxin\"})\n            sample_limits = json.loads(final_summary)[\"result\"]\n            data.update({\"sample_profile\": sample_limits})\n>           self.protocol_endotoxin.compare_samples_swab_rinse_sample_limits_endotoxin_summary(data)\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_prodcution_protocol.py:3599: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.protocols.protocol_endotoxin_residue_verification.ProtocolEndotoxinAcceptanceCriteria object at 0x000001CD08362CD0>\ndata = {'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'externalId': 'Protocol-549A', 'nam...: {'additionalInfo': '', 'enabled': True, 'perUnitVolume': {'unit': 'L', 'value': 0.004}, 'rinseLimit': 16}, ...}, ...}\n\n    def compare_samples_swab_rinse_sample_limits_endotoxin_summary(self, data):\n        policies = [data[\"direct_policy\"], data[\"indirect_policy\"]]  # Include the direct policy and indirect policy\n        for policy in policies:\n            if policy == \"custom\":\n                sheet_name = data[\"external_id\"] + \"_samples_custom\"\n                sample_limits = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name,\n                                                                        data[\"columns\"], data[\"sample_type\"])\n    \n                result_list = [item for item in sample_limits[\"rinse_limit_ppm\"] if item != '#VALUE!']\n                sample_ids = [item for item in sample_limits[\"sample id\"] if item != '#VALUE!']\n                rinse_vol_mapping = dict(zip(sample_ids, result_list))\n                for sample_limit in data[\"sample_profile\"][\"sampleLimits\"]:\n                    if str(sample_limit.get('sampleType')).strip() == str(data['sample_type']).strip():\n                        sample_id = sample_limit.get('sampleId')\n                        if sample_id is not None and sample_id in sample_limits.get(\"sample id\"):\n                            method_type = sample_limit.get('methodType')\n                            limit_value = sample_limit['limit']['value']\n                            if limit_value is not None:\n                                if method_type == 'rinse':\n                                    assert round(limit_value, 1) == round(rinse_vol_mapping[sample_id], 1), \\\n                                        (f\"Sample ID: {sample_id} - Failed (Rinse Limit {round(limit_value, 3)} not \"\n                                         f\"match with calculated limit {round(rinse_vol_mapping[sample_id], 3)} for\"\n                                         f\"sample id {sample_id}\")\n    \n            else:\n                sheet_name = data[\"external_id\"] + \"_samples\"\n    \n                sample_limits = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name,\n                                                                        data[\"columns\"], data[\"sample_type\"])\n    \n                if data.get(\"vol_unit\") is not None and data.get(\"vol_unit\").get(\"default_unit\") == \"L\":\n                    rinse_vol = [item * 0.001 for item in sample_limits[\"Rinse volume(ml)\"] if item != '#VALUE!']\n                else:\n                    rinse_vol = [item for item in sample_limits[\"Rinse volume(ml)\"] if item != '#VALUE!']\n                sample_ids = [item for item in sample_limits[\"sample id\"] if item != '#VALUE']\n                rinse_vol_mapping = dict(zip(sample_ids, rinse_vol))\n                for sample_limit in data[\"sample_profile\"][\"sampleLimits\"]:\n                    sample_id = sample_limit.get('sampleId')\n                    if str(sample_limit.get('sampleType')).strip() == str(data['sample_type']).strip() and \\\n                            sample_id in sample_ids:\n                        if sample_id.endswith((\"/EN-3\", \"/EN-4\")):\n                            indirect_endotoxin_data = self.indirect_endotoxin_policy_details()\n                            endotoxin_data = \\\n                                indirect_endotoxin_data[\"indirect\"]['endotoxin']['details']['rinse']['unclassified'][\n                                    'endotoxin']\n                            const.ENDOTOXIN_ML = endotoxin_data[\"perUnitAreaOrVolume\"][\"value\"]\n                            const.ENDOTOXIN_EU = endotoxin_data['value']\n                            method_type = sample_limit.get('methodType')\n                            limit_value = sample_limit['limit']['value']\n                            calculated_sample_limit = const.ENDOTOXIN_EU / const.ENDOTOXIN_ML * rinse_vol_mapping[\n                                sample_id]\n                            if limit_value is not None:\n                                if method_type == 'rinse':\n                                    assert round(limit_value, 3) == round(calculated_sample_limit, 3), \\\n                                        (f\"Sample ID: {sample_id} - Failed (Rinse Limit {limit_value} not match with \"\n                                         f\"calculated limit {calculated_sample_limit} for sample id {sample_id})\")\n    \n                        if sample_id.endswith((\"/EN-1\", \"/EN-2\")):\n                            direct_endotoxin_data = self.direct_endotoxin_policy_details()\n                            endotoxin_data = \\\n                                direct_endotoxin_data[\"direct\"]['endotoxin']['details']['rinse']['unclassified'][\n                                    'endotoxin']\n                            const.ENDOTOXIN_ML = endotoxin_data[\"perUnitAreaOrVolume\"][\"value\"]\n                            const.ENDOTOXIN_EU = endotoxin_data['value']\n                            method_type = sample_limit.get('methodType')\n                            limit_value = sample_limit['limit']['value']\n                            calculated_sample_limit = const.ENDOTOXIN_EU / const.ENDOTOXIN_ML * rinse_vol_mapping[\n                                sample_id]\n                            if limit_value is not None:\n                                if method_type == 'rinse':\n>                                   assert round(limit_value, 3) == round(calculated_sample_limit, 3), \\\n                                        (f\"Sample ID: {sample_id} - Failed (Rinse Limit {limit_value} not match with \"\n                                         f\"calculated limit {calculated_sample_limit} for sample id {sample_id})\")\nE                                   AssertionError: Sample ID: EQM-17/EN-1 - Failed (Rinse Limit 40 not match with calculated limit 40000.0 for sample id EQM-17/EN-1)\n\ntests\\unit\\protocols\\protocol_endotoxin_residue_verification.py:374: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1732974915848,"stop":1732974916198,"duration":350},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1732974916198,"stop":1732974916326,"duration":128},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_final_summary_endotoxin_residue_verification_details_sqcm_l"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"22492-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cwdb8vp","url":"https://app.clickup.com/t/86cwdb8vp","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","validate_final_summary_endotoxin_residue_verification_details_sqcm_l"]},"source":"7236956eabeecce2.json","parameterValues":[]}