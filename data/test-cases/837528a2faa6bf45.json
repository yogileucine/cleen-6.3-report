{"uid":"837528a2faa6bf45","name":"Validate the sample limits of microbial residue verification for direct indirect bop for split policy","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_microbial_residue_sample_limits_direct_indirect_bop_split","historyId":"866374769057b9265f336bf750177ad2","time":{"start":1733042204746,"stop":1733042219671,"duration":14925},"description":"This test case tests API to Create Protocol for microbial residue verification and validate the sample limits when select based on policy for direct and indirect for split policy","descriptionHtml":"<p>This test case tests API to Create Protocol for microbial residue verification and validate the sample limits when select based on policy for direct and indirect for split policy</p>\n","status":"failed","statusMessage":"AssertionError: Limits from api 21.9625 are not equal to calculated swab limit21.962500000000002 for EQM-17/MI-5","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x00000251D0FEE7D0>\n\n    @allure.title(\"Validate the sample limits of microbial residue verification for direct indirect bop for split \"\n                  \"policy\")\n    @allure.description(\"This test case tests API to Create Protocol for microbial residue verification and validate \"\n                        \"the sample limits when select based on policy for direct and indirect for split policy\")\n    @allure.link(\"https://app.clickup.com/t/86cv2gany\")  # bop = based on policy\n    @pytest.mark.validate_microbial_residue_sample_limits_direct_indirect_bop_split\n    def test_validate_microbial_residue_sample_limits_direct_indirect_bop_split(self):\n        data, updated_data = self.test_create_protocol_microbial_residue_verification_based_on_policy_direct_indirect_split()\n        equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"],\n                         \"columns\": self.EXCELS_COLUMNS,\n                         \"sample_type\": \"Microbial - Bacterial\", \"contact_custom\": \"Direct\", \"contact_bop\": \"Indirect\",\n                         \"split_type\": \"bacterialLimit\", \"sample_type_split\": \"Bacterial\"})\n            get_sample_limits = \\\n                self.protocol_common_method.get_sample_limits_protocol_residue_verification_protocol(data)[\n                    \"response\"]\n            sample_limits = json.loads(get_sample_limits)[\"result\"]\n            data.update({\"sample_profile\": sample_limits})\n            self.protocol_microbial.compare_samples_swab_rinse_sample_limits_microbial_split(data)\n            data.update({\"sample_type\": \"Microbial - Fungal\", \"contact_custom\": \"Direct\", \"contact_bop\": \"Indirect\",\n                         \"split_type\": \"fungalLimit\", \"sample_type_split\": \"Fungal\"})\n>           self.protocol_microbial.compare_samples_swab_rinse_sample_limits_microbial_split(data)\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_prodcution_protocol.py:3271: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.protocols.protocol_microbial_residue_verification.ProtocolMicrobialAcceptanceCriteria object at 0x00000251D0F24FD0>\ndata = {'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'externalId': 'Protocol-DUBA', 'nam...nse volume(ml)', 'rinse_limit_ppm', 'swab_limit_ppm', ...], 'contact_bop': 'Indirect', 'contact_custom': 'Direct', ...}\n\n    def compare_samples_swab_rinse_sample_limits_microbial_split(self, data):\n        policies = [data[\"direct_fungal_policy\"], data[\"direct_bacterial_policy\"], data[\"indirect_fungal_policy\"],\n                    data[\"indirect_bacterial_policy\"]]  # Include the direct policy and indirect policy\n        for policy in policies:\n            if policy != \"custom\":\n                if data.get(\"sample_type\") in [\"Microbial - Fungal\", \"Microbial - Bacterial\"]:\n                    sheet_name = \"microbial_split_sample\"\n                    sample_limits = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name,\n                                                                            data[\"columns\"], data[\"sample_type_split\"])\n    \n                    rinse_vol = [item for item in sample_limits[\"Rinse volume(ml)\"] if item != '#VALUE!']\n                    swab_area = [item for item in sample_limits[\"Sampling area(sqcm)\"] if item != '#VALUE!']\n                    sample_ids = [item for item in sample_limits[\"sample id\"] if item != '#VALUE!']\n                    swab_area_mapping = dict(zip(sample_ids, swab_area))\n                    rinse_vol_mapping = dict(zip(sample_ids, rinse_vol))\n    \n                    for sample_limit in data[\"sample_profile\"]['sampleLimitsDetails']:\n                        sample_id = sample_limit.get('sampleId')\n                        limit_value = sample_limit['limit']['value']\n                        if str(sample_limit.get('sampleType')).strip() == data[\"sample_type\"]:\n                            method_type = sample_limit.get('methodType')\n                            if sample_id is not None and sample_id in swab_area_mapping.keys():\n                                if sample_id.endswith(const.DIRECT_MICROBIAL_SAMPLES):\n                                    bioburden_data = self.get_microbial_policy_details_split(data['split_type'],\n                                                                                             category_type=\"direct\")\n                                if sample_id.endswith(const.INDIRECT_MICROBIAL_SAMPLES):\n                                    bioburden_data = self.get_microbial_policy_details_split(data['split_type'],\n                                                                                             category_type=\"indirect\")\n                                    if limit_value is not None:\n                                        if method_type == 'swab':\n                                            swab_area = swab_area_mapping[sample_id]\n                                            bioburden_cfu = bioburden_data[method_type][\"swab\"]\n                                            bioburden_area = bioburden_data[method_type][\"PerUnitArea\"][\"value\"]\n                                            calculated_sample_limit = bioburden_cfu / bioburden_area * swab_area\n>                                           assert round(limit_value, 3) == round(calculated_sample_limit, 3), \\\n                                                (f\"Limits from api {limit_value} are not equal to calculated swab limit\"\n                                                 f\"{calculated_sample_limit} for {sample_id}\")\nE                                           AssertionError: Limits from api 21.9625 are not equal to calculated swab limit21.962500000000002 for EQM-17/MI-5\n\ntests\\unit\\protocols\\protocol_microbial_residue_verification.py:853: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1733038443170,"stop":1733038443648,"duration":478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733038443648,"stop":1733038443948,"duration":300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_microbial_residue_sample_limits_direct_indirect_bop_split"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"25196-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cv2gany","url":"https://app.clickup.com/t/86cv2gany","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cbbf7653b300d263","status":"passed","time":{"start":1732978810824,"stop":1732978869066,"duration":58242}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["multi_production_protocol","scenario","validate_microbial_residue_sample_limits_direct_indirect_bop_split"]},"source":"837528a2faa6bf45.json","parameterValues":[]}