{"uid":"509d085b0f3e90cd","name":"Validate the sample limits of Endotoxin residue verification for direct indirect bop","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol#test_validate_microbial_residue_swab_limits_absent_zero_non_split_inspection","historyId":"d72268d6c6c26de89874d61294db5833","time":{"start":1733033341942,"stop":1733033352742,"duration":10800},"description":"This test case tests API to Create Protocol for Endotoxin residue verification and validate the sample limits when select based on policy for direct and indirect","descriptionHtml":"<p>This test case tests API to Create Protocol for Endotoxin residue verification and validate the sample limits when select based on policy for direct and indirect</p>\n","status":"failed","statusMessage":"AssertionError: Swab for equipment 101: Not Matched, 0 != 0","statusTrace":"self = <test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol object at 0x00000286F01FAA50>\n\n    @allure.title(\"Validate the sample limits of Endotoxin residue verification for direct indirect bop\")\n    @allure.description(\"This test case tests API to Create Protocol for Endotoxin residue verification and validate \"\n                        \"the sample limits when select based on policy for direct and indirect\")\n    @allure.link(\"https://app.clickup.com/t/86cuuz6ue\")\n    @pytest.mark.formulation  # bop = based on policy\n    @pytest.mark.validate_microbial_residue_swab_limits_absent_zero_non_split_inspection\n    def test_validate_microbial_residue_swab_limits_absent_zero_non_split_inspection(self):\n>       protocol = self.test_validate_microbial_endotoxin_residue_swab_sample_limits_absent_zero_non_split()\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:1435: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:1081: in test_validate_microbial_endotoxin_residue_swab_sample_limits_absent_zero_non_split\n    data = self.test_microbial_endotoxin_protocol_swab_absent_zero_non_split()\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:675: in test_microbial_endotoxin_protocol_swab_absent_zero_non_split\n    self.protocol_microbial.compare_policy_protocol(\"direct\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.protocols.protocol_microbial_residue_verification.ProtocolMicrobialAcceptanceCriteria object at 0x00000286F0192190>, category_type = 'direct', split_type = None\n\n    def compare_policy_protocol(self, category_type, split_type=None):\n        injection_data = self.get_microbial_policy_details(category_type)\n        if split_type is not None:\n            response_data = self.get_microbial_protocol_details(category_type, split_type.get('split_type'))\n        else:\n            response_data = self.get_microbial_protocol_details(category_type, split_type=None)\n    \n        for equipment_id, data_response in response_data.items():\n            swab_limit = data_response.get('swab', {}).get('swabLimit')\n            swab_per_unit_area = data_response.get('swab', {}).get('perUnitArea', {})\n    \n            rinse_limit = data_response.get('rinse', {}).get('rinseLimit')\n            rinse_per_unit_volume = data_response.get('rinse', {}).get('perUnitVolume', {})\n    \n            endo_limit = data_response.get('endotoxin_rinse', {}).get('rinseLimit')\n            endo_per_unit_volume = data_response.get('endotoxin_rinse', {}).get('perUnitVolume', {})\n    \n>           assert swab_limit == injection_data['swab'][\"swab\"] and swab_per_unit_area == injection_data[\"swab\"][\n                'PerUnitArea'], f'Swab for equipment {equipment_id}: Not Matched, {swab_limit} != {injection_data[\"swab\"][\"swab\"]}'\nE           AssertionError: Swab for equipment 101: Not Matched, 0 != 0\n\ntests\\unit\\protocols\\protocol_microbial_residue_verification.py:236: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733033341409,"stop":1733033341711,"duration":302},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733033341711,"stop":1733033341940,"duration":229},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_microbial_residue_swab_limits_absent_zero_non_split_inspection"},{"name":"tag","value":"formulation"},{"name":"tag","value":"microbial_multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_production_protocol_microbial_policy_absent"},{"name":"subSuite","value":"TestMicrobialMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"24312-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuuz6ue","url":"https://app.clickup.com/t/86cuuz6ue","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","formulation","validate_microbial_residue_swab_limits_absent_zero_non_split_inspection","microbial_multi_production_protocol"]},"source":"509d085b0f3e90cd.json","parameterValues":[]}