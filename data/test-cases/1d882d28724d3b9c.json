{"uid":"1d882d28724d3b9c","name":"Validate the audit logs details for when update the active residue detail of inspection","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_updated_active_residue_detail_inspection_audit_logs_details","historyId":"1c1d04e7ed91af1027c8eb72711a3d70","time":{"start":1733050499705,"stop":1733050541324,"duration":41619},"description":"This test case test API to validate the audit logs details for when update the active residuedetail of inspection","descriptionHtml":"<p>This test case test API to validate the audit logs details for when update the active residuedetail of inspection</p>\n","status":"failed","statusMessage":"AssertionError: Expected new value 01-12-2024 16:25:41 but got 01-12-2024\nassert '01-12-2024' == '01-12-2024 16:25:41'\n  - 01-12-2024 16:25:41\n  + 01-12-2024","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x00000280D206F990>\n\n    @allure.title(\"Validate the audit logs details for when update the active residue detail of inspection\")\n    @allure.description(\"This test case test API to validate the audit logs details for when update the active residue\"\n                        \"detail of inspection\")\n    @allure.link(\"https://app.clickup.com/t/86cw2cpm7\")\n    @pytest.mark.validate_updated_active_residue_detail_inspection_audit_logs_details\n    def test_validate_updated_active_residue_detail_inspection_audit_logs_details(self):\n        inspection = self.inspection_multi_production_protocol._update_single_active_residue_verification_details_inspection(\n            self.inspection_multi_production_protocol.inspection_setup())\n        time_stamp = datetime.utcnow().isoformat()\n        payload_details = inspection[\"update_inspection_payload\"][\"residues\"][0]\n        formatted_date = self.validate_audit_logs.formate_date_iso(payload_details[\"sampleTakenOn\"])\n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"OnDemandInspection\",\n                                                                         action=const.LOG_ACTION_MODIFY)\n        below_detection_limit = payload_details[\"belowDetectionLimit\"]\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"OnDemandInspection\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if audit_diff.get(\"ID\", {}).get(\"data\", {}).get(\"old\", {}).get(\"value\") == inspection[\n                'inspection_external_id']:\n                if action_exists and domain_is_additional_policy:\n                    self.validate_audit_logs.assert_inspection_diff(audit_diff, const.SAMPLE_TAKEN_BY, None,\n                                                                    \"Admin User (Id: admin)\")\n>                   self.validate_audit_logs.assert_inspection_diff(audit_diff, const.SAMPLE_TAKEN_ON, None,\n                                                                    formatted_date)\n\ntests\\scenarios\\audit_logs\\test_audit_logs_scenarios.py:2304: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naudit_diff = {'Active Residue Verification, Location Name: Ovens(Indirect)(Swab), \\n      Sample ID: EQM-19/ICS-1, Active: Febuxost... Febuxostat, Residue Option, position: 4': {'data': {'new': {'value': 'belowDetectionLimit'}}, 'type': 'created'}, ...}\nkey_sting = ', Sample Taken On', validate_old_value = None, validate_new_value = '01-12-2024 16:25:41'\n\n    @staticmethod\n    def assert_inspection_diff(audit_diff, key_sting=const.SAMPLE_TAKEN_BY, validate_old_value=None,\n                               validate_new_value=None):\n        for i in list(audit_diff.keys()):\n            if key_sting in i:\n                old_value = audit_diff.get(i, {}).get(\"data\", {}).get(\"old\", {}).get(\"value\")\n                new_value = audit_diff.get(i, {}).get(\"data\", {}).get(\"new\", {}).get(\"value\")\n                assert old_value == validate_old_value, f\"Expected old value {validate_old_value} but got {old_value}\"\n>               assert new_value == validate_new_value, f\"Expected new value {validate_new_value} but got {new_value}\"\nE               AssertionError: Expected new value 01-12-2024 16:25:41 but got 01-12-2024\nE               assert '01-12-2024' == '01-12-2024 16:25:41'\nE                 - 01-12-2024 16:25:41\nE                 + 01-12-2024\n\ntests\\unit\\audit_logs\\test_audit_logs.py:281: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1733050257392,"stop":1733050257678,"duration":286},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733050257678,"stop":1733050257885,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_updated_active_residue_detail_inspection_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"26520-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cw2cpm7","url":"https://app.clickup.com/t/86cw2cpm7","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"edd6b7e390226943","status":"failed","statusDetails":"AssertionError: Expected new value 01-12-2024 14:49:34 but got 01-12-2024\nassert '01-12-2024' == '01-12-2024 14:49:34'\n  - 01-12-2024 14:49:34\n  + 01-12-2024","time":{"start":1733044731176,"stop":1733044774222,"duration":43046}},{"uid":"afc67c755f93629f","status":"passed","time":{"start":1732985327949,"stop":1732985372888,"duration":44939}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","audit_logs_scenarios","second_to_last","validate_updated_active_residue_detail_inspection_audit_logs_details","run(order=-2)"]},"source":"1d882d28724d3b9c.json","parameterValues":[]}