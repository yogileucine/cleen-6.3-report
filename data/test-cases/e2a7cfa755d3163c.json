{"uid":"e2a7cfa755d3163c","name":"Create Inspection on Equipment & Validate the cleaning agent Residue Verification cleaning agent Samples when surface area is sqin and volume is ml","fullName":"tests.scenarios.multi_production_protocol.inspection.test_multi_production_protocol_inspection_sqin_ml.TestInspectionMultiProductionProtocolSqinMl#test_create_inspection_validate_the_acceptance_limit_cleaning_agent_sqin_ml","historyId":"fbe19e71af2a4c7a8c8ad9058cdb1d79","time":{"start":1733040205405,"stop":1733040206128,"duration":723},"description":"This test case tests API to create an inspection on equipment and validate the cleaning agent residue verification cleaning agent samples when surface area is sqin and volume is ml","descriptionHtml":"<p>This test case tests API to create an inspection on equipment and validate the cleaning agent residue verification cleaning agent samples when surface area is sqin and volume is ml</p>\n","status":"failed","statusMessage":"AssertionError: Acceptance limit from API response EQM-19/CA-1: 0.3413947374353995 is not equal to calculated limits 0.3413942788","statusTrace":"self = <test_multi_production_protocol_inspection_sqin_ml.TestInspectionMultiProductionProtocolSqinMl object at 0x00000251D0F08250>\ninspection_setup_method = ({'acceptance_limit_dict': {'EQM-19/CA-1': 0.3413947374353995, 'EQM-19/CA-2': 0.11614951263719767, 'EQM-19/CA-3': 0.59...'name': 'Protocol-MVVX', ...}, 'additional_test': 'Conductivity', 'at_verification': 'conductivity_verification', ...})\n\n    @allure.title(\"Create Inspection on Equipment & Validate the cleaning agent Residue Verification cleaning agent \"\n                  \"Samples when surface area is sqin and volume is ml\")\n    @allure.description(\"This test case tests API to create an inspection on equipment and validate the cleaning agent \"\n                        \"residue verification cleaning agent samples when surface area is sqin and volume is ml\")\n    @allure.link(\"https://app.clickup.com/t/86cv0gx0z\")\n    @pytest.mark.create_inspection_validate_the_acceptance_limit_cleaning_agent_sqin_ml\n    def test_create_inspection_validate_the_acceptance_limit_cleaning_agent_sqin_ml(self, inspection_setup_method):\n        inspection_data, equipment_info, protocol_equipment = inspection_setup_method\n        get_inspection = self.multi_production_study.get_single_study_details(inspection_data)[\"response\"]\n        get_inspection = json.loads(get_inspection)[\"result\"]\n    \n        for i in range(len(equipment_info)):\n            inspection_data.update({\"inspection_id\": get_inspection[\"inspections\"][i][\"id\"]})\n            inspection = self.multi_production_inspection.get_inspection_detail(inspection_data)[\"response\"]\n            inspection = json.loads(inspection)[\"result\"]\n    \n            acceptance_limit_dict = {residue['sampleExternalId']: residue['acceptanceLimit'] for residue in\n                                     inspection[\"cleaningAgent\"][\"residues\"]}\n    \n            for j in range(len(inspection[\"cleaningAgent\"][\"residues\"])):\n                sample_id = inspection[\"cleaningAgent\"][\"residues\"][j][\"sampleExternalId\"]\n                method_type = inspection[\"cleaningAgent\"][\"residues\"][j][\"methodType\"]\n    \n                inspection_data.update({\"external_id\": sample_id.split(\"/\")[0], \"sample_type\": \"Cleaning Agent\",\n                                        \"method_type\": method_type, \"sample_id\": sample_id,\n                                        \"acceptance_limit_dict\": acceptance_limit_dict,\n                                        \"protocol_equipment\": protocol_equipment,\n                                        \"index\": j})\n    \n>               self.multi_production_inspection.compare_the_cleaning_agent_acceptance_limit(inspection_data)\n\ntests\\scenarios\\multi_production_protocol\\inspection\\test_multi_production_protocol_inspection_sqin_ml.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'acceptance_limit_dict': {'EQM-19/CA-1': 0.3413947374353995, 'EQM-19/CA-2': 0.11614951263719767, 'EQM-19/CA-3': 0.59,... ...], 'create_inspection_payload': {'authorId': 6, 'caseStudyId': 5, 'equipmentId': 37, 'productionId': 27, ...}, ...}\n\n    @staticmethod\n    def compare_the_cleaning_agent_acceptance_limit(data):\n        if data[\"protocol_equipment\"][\"direct_policy\"] is not \"custom\":\n            sheet_name = \"cleaning_agent_sample_limits\"\n        else:\n            sheet_name = data[\"external_id\"] + \"_samples_custom\"\n    \n        acceptance_limit = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name,\n                                                                   data[\"columns\"], data[\"sample_type\"])\n    \n        acceptance_limit_dict = dict(zip(acceptance_limit[\"sample id\"], acceptance_limit[\"swab_rinse_ppm\"]))\n    \n        for key, value in data[\"acceptance_limit_dict\"].items():\n            if key in acceptance_limit_dict:\n                if data.get(\"unit_data\") == const.DEFAULT_SURFACE_AREA_SQM[\"default_unit\"]:\n                    assert round(acceptance_limit_dict[key] * const.CONVERT_SQCM_SQM,\n                                 3) == round(value, 3), \\\n                        (f\"Acceptance limit from API response {key}: {value} is not equal to calculated \"\n                         f\"limits {acceptance_limit_dict[key]}\")\n                elif data.get(\"unit_data\") == const.DEFAULT_SURFACE_AREA_SQIN[\"default_unit\"]:\n>                   assert round(acceptance_limit_dict[key] * const.CONVERT_SQCM_SQIN,\n                                 3) == round(value, 3), \\\n                        (f\"Acceptance limit from API response {key}: {value} is not equal to calculated \"\n                         f\"limits {acceptance_limit_dict[key]}\")\nE                   AssertionError: Acceptance limit from API response EQM-19/CA-1: 0.3413947374353995 is not equal to calculated limits 0.3413942788\n\ntests\\unit\\inspection_multi_production\\inspection_multi_production_protocol.py:163: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733038443170,"stop":1733038443648,"duration":478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733038443648,"stop":1733038443948,"duration":300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"inspection_setup_method","time":{"start":1733040093698,"stop":1733040151430,"duration":57732},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"create_inspection_validate_the_acceptance_limit_cleaning_agent_sqin_ml"},{"name":"tag","value":"inspection_multi_production_protocol_sqin_ml"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.inspection"},{"name":"suite","value":"test_multi_production_protocol_inspection_sqin_ml"},{"name":"subSuite","value":"TestInspectionMultiProductionProtocolSqinMl"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"25196-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.inspection.test_multi_production_protocol_inspection_sqin_ml"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cv0gx0z","url":"https://app.clickup.com/t/86cv0gx0z","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c9b4e0d2e04f1ba5","status":"failed","statusDetails":"AssertionError: Acceptance limit from API response EQM-19/CA-1: 0.3413947374353995 is not equal to calculated limits 0.3413942788","time":{"start":1732976802198,"stop":1732976802950,"duration":752}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["inspection_multi_production_protocol_sqin_ml","create_inspection_validate_the_acceptance_limit_cleaning_agent_sqin_ml","scenario"]},"source":"e2a7cfa755d3163c.json","parameterValues":[]}