{"uid":"c29424c070ff5d33","name":"Validate the audit logs details for when update the visual detail of inspection","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_config_run_form_filed_visual_detail_inspection_audit_logs_details","historyId":"38b8b38afcec5c9d6d6cb1d634d6924f","time":{"start":1734439615178,"stop":1734439676934,"duration":61756},"description":"This test case test API to validate the audit logs details for when update the visual detailof inspection","descriptionHtml":"<p>This test case test API to validate the audit logs details for when update the visual detailof inspection</p>\n","status":"failed","statusMessage":"AssertionError: Expected 'Automation Test' for new Visual Inspection, Additional Info: 5, but got None\nassert None == 'Automation Test'","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x7f81c3d151f0>\n\n    @allure.title(\"Validate the audit logs details for when update the visual detail of inspection\")\n    @allure.description(\"This test case test API to validate the audit logs details for when update the visual detail\"\n                        \"of inspection\")\n    @allure.link(\"https://app.clickup.com/t/86cwaykcz\")\n    @pytest.mark.validate_config_run_form_filed_visual_detail_inspection_audit_logs_details\n    def test_validate_config_run_form_filed_visual_detail_inspection_audit_logs_details(self):\n        config_dict = []\n        config_details, payload, config_data, inspection_details, protocol_equipment, inspection_data = self.configure_run_form_fields.test_validate_study_inspection_for_visual_details()\n        time_stamp = datetime.utcnow().isoformat()\n        get_protocol_details = self.protocols.get_protocol_details(protocol_equipment)\n        protocol_details = json.loads(get_protocol_details[\"response\"])[\"result\"][\"readOnlyData\"]\n    \n        for i in protocol_details[\"onDemandInspectionSetting\"][\"visual\"].items():\n            config_dict.append(i)\n    \n        inspection_details = inspection_details[\"response\"]\n        inspection_details = json.loads(inspection_details)[\"result\"]\n    \n        (additional_info_position, batch_number_position, numb_er, number_position, single_line_text,\n         single_line_text_position, yes_no, yes_no_position, multi_line_text, multi_line_text_position,\n         date_time_field, date_time_field_position) = (\n            self.validate_audit_logs.extract_label_position(config_dict))\n    \n        config_field = self.validate_audit_logs.config_date_inspection(config_details, payload)\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"OnDemandInspection\",\n                                                                         action=const.LOG_ACTION_MODIFY)\n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"OnDemandInspection\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if audit_diff.get(\"ID\", {}).get(\"data\", {}).get(\"old\", {}).get(\"value\") == inspection_data[\n                'inspection_external_id']:\n                if action_exists and domain_is_additional_policy:\n>                   self.validate_audit_logs.assert_audit_diff(audit_diff,\n                                                               f\"{const.VISUAL_INSPECTION} Additional Info: {additional_info_position}\",\n                                                               None,\n                                                               inspection_details[\"visual\"][\"additionalInfo\"])\n\ntests/scenarios/audit_logs/test_audit_logs_scenarios.py:2762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.audit_logs.test_audit_logs.TestAuditLogs object at 0x7f81c47e0890>\naudit_diff = {'ID': {'data': {'new': {'value': 'IN-DEC24-400\\nStudy: Study-FX7U (ID: STUDY-DEC24-90)\\nEquipment: Tablet deduster & ...ion, DATE TIME-field-O2Q2P, position: 14': {'data': {'new': {'value': '17-12-2024 18:17:56'}}, 'type': 'created'}, ...}\nkey = 'Visual Inspection, Additional Info: 5', expected_old_value = None, expected_new_value = 'Automation Test'\n\n    def assert_audit_diff(self, audit_diff, key, expected_old_value, expected_new_value):\n        old_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"old\", {}).get(\"value\")\n        new_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"new\", {}).get(\"value\")\n    \n        if isinstance(expected_old_value, datetime) or isinstance(expected_new_value, datetime):\n            self.get_diff_time_stamp(old_value, expected_old_value)\n    \n        assert old_value == expected_old_value, f\"Expected '{expected_old_value}' for old {key}, but got {old_value}\"\n>       assert new_value == expected_new_value, f\"Expected '{expected_new_value}' for new {key}, but got {new_value}\"\nE       AssertionError: Expected 'Automation Test' for new Visual Inspection, Additional Info: 5, but got None\nE       assert None == 'Automation Test'\n\ntests/unit/audit_logs/test_audit_logs.py:131: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1734429604694,"stop":1734429605014,"duration":320},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1734429605014,"stop":1734429605194,"duration":180},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_config_run_form_filed_visual_detail_inspection_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"1892009-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cwaykcz","url":"https://app.clickup.com/t/86cwaykcz","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["validate_config_run_form_filed_visual_detail_inspection_audit_logs_details","scenario","audit_logs_scenarios","second_to_last","run(order=-2)"]},"source":"c29424c070ff5d33.json","parameterValues":[]}