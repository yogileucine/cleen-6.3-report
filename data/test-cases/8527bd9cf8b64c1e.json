{"uid":"8527bd9cf8b64c1e","name":"Validate the audit logs details for delete auto selection policy","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_delete_selection_policy_audit_logs_details","historyId":"ef818b3195224721d10881388cec8cdf","time":{"start":1733031295592,"stop":1733031295892,"duration":300},"description":"This test case test API to validate the audit logs details for delete auto selection policy","descriptionHtml":"<p>This test case test API to validate the audit logs details for delete auto selection policy</p>\n","status":"failed","statusMessage":"AssertionError: Expected '2024-12-01 05:34:55.711726', but got '2024-12-01 05:30:32.245000', the difference '0:04:23.466726' is more than the tolerance '0:01:00'\nassert datetime.timedelta(seconds=263, microseconds=466726) <= datetime.timedelta(seconds=60)","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x00000262ADB3C6D0>\n\n    @allure.title(\"Validate the audit logs details for delete auto selection policy\")\n    @allure.description(\"This test case test API to validate the audit logs details for delete auto selection policy\")\n    @allure.link(\"https://app.clickup.com/t/86cw0fg9k\")\n    @pytest.mark.validate_delete_selection_policy_audit_logs_details\n    def test_validate_delete_selection_policy_audit_logs_details(self):\n        selection_policy = self.sampling_location_assessment.test_delete_auto_selection_policy()\n        time_stamp = time_stamp_iso_format()\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"SamplingPolicy\",\n                                                                         action=const.LOG_ACTION_DELETE)\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"SamplingPolicy\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if action_exists and domain_is_additional_policy:\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Min Locations\", \"1\", None)\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Policy\", const.YES_NO_POLICY, '')\n>               self.validate_audit_logs.updated_policy_time_stamp(time_stamp, response_time_stamp)\n\ntests\\scenarios\\audit_logs\\test_audit_logs_scenarios.py:2738: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntime_stamp = datetime.datetime(2024, 12, 1, 5, 34, 55, 711726), response_time_stamp = datetime.datetime(2024, 12, 1, 5, 30, 32, 245000)\n\n    @staticmethod\n    def updated_policy_time_stamp(time_stamp, response_time_stamp):\n        time_stamp = str(time_stamp)\n        response_time_stamp = datetime.fromisoformat(response_time_stamp.replace(\"Z\", \"+00:00\"))\n        response_time_stamp = response_time_stamp.replace(tzinfo=None)\n        time_stamp = datetime.fromisoformat(time_stamp)\n        # Define the tolerance (for example, 1 minute)\n        tolerance = timedelta(minutes=1)\n    \n        # Calculate the absolute difference between the two timestamps\n        time_difference = abs(response_time_stamp - time_stamp)\n    \n>       assert time_difference <= tolerance, (f\"Expected '{time_stamp}', but got '{response_time_stamp}', \"\n                                              f\"the difference '{time_difference}' is more than the \"\n                                              f\"tolerance '{tolerance}'\")\nE       AssertionError: Expected '2024-12-01 05:34:55.711726', but got '2024-12-01 05:30:32.245000', the difference '0:04:23.466726' is more than the tolerance '0:01:00'\nE       assert datetime.timedelta(seconds=263, microseconds=466726) <= datetime.timedelta(seconds=60)\n\ntests\\unit\\audit_logs\\test_audit_logs.py:148: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733031294985,"stop":1733031295417,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733031295417,"stop":1733031295590,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_delete_selection_policy_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"23560-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cw0fg9k","url":"https://app.clickup.com/t/86cw0fg9k","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","audit_logs_scenarios","validate_delete_selection_policy_audit_logs_details","second_to_last","run(order=-2)"]},"source":"8527bd9cf8b64c1e.json","parameterValues":[]}