{"uid":"b0bba9f7ba11f0b9","name":"Validate the audit logs details for when update the cleaning detail of inspection","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_updated_cleaning_detail_inspection_audit_logs_details","historyId":"bcbd19f34058d09d2ea011ea3e9fe83f","time":{"start":1734439289441,"stop":1734439349327,"duration":59886},"description":"This test case test API to validate the audit logs details for when update the cleaning detailof inspection","descriptionHtml":"<p>This test case test API to validate the audit logs details for when update the cleaning detailof inspection</p>\n","status":"failed","statusMessage":"AssertionError: Expected 'Automation Test' for new Cleaning Details, Additional Info, but got None\nassert None == 'Automation Test'","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x7f81c3d16ea0>\n\n    @allure.title(\"Validate the audit logs details for when update the cleaning detail of inspection\")\n    @allure.description(\n        \"This test case test API to validate the audit logs details for when update the cleaning detail\"\n        \"of inspection\")\n    @allure.link(\"https://app.clickup.com/t/86cw1quw7\")\n    @pytest.mark.validate_updated_cleaning_detail_inspection_audit_logs_details\n    def test_validate_updated_cleaning_detail_inspection_audit_logs_details(self):\n        inspection = self.inspection_multi_production_protocol.test_update_cleaning_details_inspection(\n            self.inspection_multi_production_protocol.inspection_setup())\n        time_stamp = datetime.utcnow().isoformat()\n    \n        payload_details = inspection[\"update_inspection_payload\"]\n    \n        formatted_date = self.validate_audit_logs.formate_date_iso(payload_details[\"cleaningStartedAt\"])\n    \n        expected_audit_log_msg = (f\"{inspection['inspection_external_id']}\\nStudy: {inspection['study_name']} \"\n                                  f\"(ID: {inspection['study_external_id']})\\nEquipment: \"\n                                  f\"Tablet deduster & metal detector (ID: EQM-19)\")\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"OnDemandInspection\",\n                                                                         action=const.LOG_ACTION_MODIFY)\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"OnDemandInspection\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if audit_diff.get(\"ID\", {}).get(\"data\", {}).get(\"old\", {}).get(\"value\") == inspection[\n                'inspection_external_id']:\n                if action_exists and domain_is_additional_policy:\n>                   self.validate_audit_logs.assert_audit_diff(audit_diff, \"Cleaning Details, Additional Info\",\n                                                               None,\n                                                               payload_details[\"additionalInfo\"])\n\ntests/scenarios/audit_logs/test_audit_logs_scenarios.py:2094: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.audit_logs.test_audit_logs.TestAuditLogs object at 0x7f81c47e0890>\naudit_diff = {'Cleaning Details, Additional Information, position: 4': {'data': {'new': {'value': 'Automation Test'}}, 'type': 'cre...Equipment: Tablet deduster & metal detector (ID: EQM-19)'}, 'old': {'value': 'IN-DEC24-375'}}, 'type': 'updated'}, ...}\nkey = 'Cleaning Details, Additional Info', expected_old_value = None, expected_new_value = 'Automation Test'\n\n    def assert_audit_diff(self, audit_diff, key, expected_old_value, expected_new_value):\n        old_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"old\", {}).get(\"value\")\n        new_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"new\", {}).get(\"value\")\n    \n        if isinstance(expected_old_value, datetime) or isinstance(expected_new_value, datetime):\n            self.get_diff_time_stamp(old_value, expected_old_value)\n    \n        assert old_value == expected_old_value, f\"Expected '{expected_old_value}' for old {key}, but got {old_value}\"\n>       assert new_value == expected_new_value, f\"Expected '{expected_new_value}' for new {key}, but got {new_value}\"\nE       AssertionError: Expected 'Automation Test' for new Cleaning Details, Additional Info, but got None\nE       assert None == 'Automation Test'\n\ntests/unit/audit_logs/test_audit_logs.py:131: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1734429604694,"stop":1734429605014,"duration":320},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1734429605014,"stop":1734429605194,"duration":180},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_updated_cleaning_detail_inspection_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"1892009-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cw1quw7","url":"https://app.clickup.com/t/86cw1quw7","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","audit_logs_scenarios","second_to_last","run(order=-2)","validate_updated_cleaning_detail_inspection_audit_logs_details"]},"source":"b0bba9f7ba11f0b9.json","parameterValues":[]}