{"uid":"411ead7f48d03a80","name":"Validate the Nitrosamine residue verification final summary page","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_final_summary_nitrosamine_residue_verification_details","historyId":"293d43ede108d360624fa011aaabe589","time":{"start":1733031566663,"stop":1733031570858,"duration":4195},"description":"This test case tests API to Create Protocol for nitrosamine residue verification and validate the final summary details","descriptionHtml":"<p>This test case tests API to Create Protocol for nitrosamine residue verification and validate the final summary details</p>\n","status":"broken","statusMessage":"TypeError: 'NoneType' object is not iterable","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x0000014B9690E7D0>\n\n    @allure.title(\"Validate the Nitrosamine residue verification final summary page\")\n    @allure.description(\"This test case tests API to Create Protocol for nitrosamine residue verification and \"\n                        \"validate the final summary details\")\n    @allure.link(\"https://app.clickup.com/t/86cumczrd\")\n    @pytest.mark.validate_final_summary_nitrosamine_residue_verification_details\n    def test_validate_final_summary_nitrosamine_residue_verification_details(self):\n        data = self.test_create_protocol_nitrosamine_residue_verification_based_on_policy()\n        no_of_runs_payload = number_of_runs_sample_limits()\n    \n        data.update({\"no_of_runs_payload\": no_of_runs_payload})\n    \n        self.protocol_common_method.update_protocol_residue_verification_sample_limits_run(data)\n    \n        final_summary = self.protocol_common_method.get_active_final_summary_details(data)[\"response\"]\n    \n        equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n        for i in equipments_id:\n            if i[\"external_id\"] == 'EQM-3':\n                continue\n            if i[\"external_id\"] == 'EQM-2':\n                continue\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"],\n                         \"columns\": self.EXCELS_COLUMNS, \"sample_type\": \"Nitrosamine\"})\n            sample_limits = json.loads(final_summary)[\"result\"]\n            data.update({\"sample_profile\": sample_limits})\n>           self.protocol_nitrosamine.compare_samples_swab_rinse_limits_nitrosamine_summary(data)\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_prodcution_protocol.py:3695: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.protocols.protocol_nitrosamine_residue_verification.ProtocolNitrosamineAcceptanceCriteria object at 0x0000014B968357D0>\ndata = {'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'externalId': 'Protocol-RRBA', 'nam...3': 0.05216513674618427, 'amId': '2204022a-0b36-4efd-9d41-958c46331058', 'enabled': True, ...}}}, '105': {}, ...}, ...}\n\n    def compare_samples_swab_rinse_limits_nitrosamine_summary(self, data):\n        sheet_name = \"nitrosamine_sample_limits\"\n        sample_limits = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name,\n                                                                self.columns, data[\"sample_type\"])\n        swab_area = [item for item in sample_limits[\"swab_limit_ppm\"] if item != '#VALUE']\n        rinse_vol = [item for item in sample_limits[\"rinse_limit_ppm\"] if item != '#VALUE']\n        sample_ids = [item for item in sample_limits[\"sample id\"] if item != '#VALUE!']\n>       nitrosamine_id = [item for item in sample_limits[\"Nitrosamine Name\"] if item != '#VALUE']\nE       TypeError: 'NoneType' object is not iterable\n\ntests\\unit\\protocols\\protocol_nitrosamine_residue_verification.py:332: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733031566135,"stop":1733031566492,"duration":357},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733031566492,"stop":1733031566663,"duration":171},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_final_summary_nitrosamine_residue_verification_details"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"5024-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cumczrd","url":"https://app.clickup.com/t/86cumczrd","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_final_summary_nitrosamine_residue_verification_details","multi_production_protocol","scenario"]},"source":"411ead7f48d03a80.json","parameterValues":[]}