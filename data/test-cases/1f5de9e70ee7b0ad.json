{"uid":"1f5de9e70ee7b0ad","name":"Validate the audit logs details for when update the cleaning agent residue verification detail of inspection","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_config_run_form_filed_cleaning_agent_residue_detail_inspection_audit_logs_details","historyId":"8e13c5b62d461a64767db6bef62c36bc","time":{"start":1733050759141,"stop":1733050810246,"duration":51105},"description":"This test case test API to validate the audit logs details for when update the active residueverification detail of inspection","descriptionHtml":"<p>This test case test API to validate the audit logs details for when update the active residueverification detail of inspection</p>\n","status":"failed","statusMessage":"AssertionError: Expected '1e-10' for new Cleaning Agent Residue Verification, Location Name: Dryers(Indirect)(Rinse), \n        Sample ID: EQM-16/CAR-10, Cleaning Agent: Methanol, Observed Residue, position: 5, but got 1e-10\nassert 1e-10 == '1e-10'","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x00000280D205EBD0>\n\n    @allure.title(\"Validate the audit logs details for when update the cleaning agent residue verification detail of \"\n                  \"inspection\")\n    @allure.description(\"This test case test API to validate the audit logs details for when update the active residue\"\n                        \"verification detail of inspection\")\n    @allure.link(\"https://app.clickup.com/t/86cw8jmuk\")\n    @pytest.mark.validate_config_run_form_filed_cleaning_agent_resdiue_detail_inspection_audit_logs_details\n    def test_validate_config_run_form_filed_cleaning_agent_residue_detail_inspection_audit_logs_details(self):\n        config_dict = []\n        config_details, payload, config_data, inspection_details, protocol_equipment, inspection_data = (\n            self.configure_run_form_fields.test_validate_study_inspection_for_cleaning_agent_residue_verification_details())\n        time_stamp = datetime.utcnow().isoformat()\n        get_protocol_details = self.protocols.get_protocol_details(protocol_equipment)\n        protocol_details = json.loads(get_protocol_details[\"response\"])[\"result\"][\"readOnlyData\"]\n    \n        for i in protocol_details[\"onDemandInspectionSetting\"][\"cleaningAgentResidueVerification\"].items():\n            config_dict.append(i)\n    \n        inspection_details = json.loads(inspection_details)[\"result\"]\n    \n        config_field = self.validate_audit_logs.config_date_inspection(config_details, payload[\"residues\"][0])\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"OnDemandInspection\",\n                                                                         action=const.LOG_ACTION_MODIFY)\n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"OnDemandInspection\"\n            audit_diff = result.get(\"diff\", {})\n    \n            get_created_keys = self.validate_audit_logs.get_created_keys(audit_diff)\n    \n            date_time = self.validate_audit_logs.formate_date_iso(config_field[\"DATE_TIME\"])\n    \n            if action_exists and domain_is_additional_policy:\n                self.validate_audit_logs.check_logs_details(audit_diff, get_created_keys, \"Additional Information\",\n                                                            None,\n                                                            inspection_details[\"cleaningAgent\"][\n                                                                \"residues\"][0][\"additionalInfo\"])\n                self.validate_audit_logs.check_log_times(audit_diff, get_created_keys, \"DATE\", None,\n                                                         date_time)\n                self.validate_audit_logs.check_logs_details(audit_diff, get_created_keys, \"Residue Option\", None,\n                                                            \"belowDetectionLimit\")\n>               self.validate_audit_logs.check_logs_details(audit_diff, get_created_keys, \"Observed Residue\", None,\n                                                            '1e-10')\n\ntests\\scenarios\\audit_logs\\test_audit_logs_scenarios.py:2863: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naudit_diff = {'Cleaning Agent Residue Verification, Location Name: Dryers(Direct)(Rinse), \\n      Sample ID: EQM-16/CAR-1, Cleaning...ample ID: EQM-16/CAR-1, Cleaning Agent: Hydrochloric acid, DATE-field-6WDH7, position: 12': {'type': 'unchanged'}, ...}\nlog_string = ['Cleaning Agent Residue Verification, Location Name: Dryers(Indirect)(Rinse), \\n      Sample ID: EQM-16/CAR-10, Clean...s(Indirect)(Rinse), \\n      Sample ID: EQM-16/CAR-10, Cleaning Agent: Methanol, Sample Reviewed On, position: 10', ...]\nkey_to_check = 'Observed Residue', expected_old_value = None, expected_new_value = '1e-10'\n\n    @staticmethod\n    def check_logs_details(audit_diff, log_string, key_to_check, expected_old_value, expected_new_value):\n        for i in log_string:\n            if key_to_check in i:\n                old_value = audit_diff.get(i, {}).get(\"data\", {}).get(\"old\", {}).get(\"value\")\n                new_value = audit_diff.get(i, {}).get(\"data\", {}).get(\"new\", {}).get(\"value\")\n                assert old_value == expected_old_value, f\"Expected '{expected_old_value}' for old {i}, but got {old_value}\"\n>               assert new_value == expected_new_value, f\"Expected '{expected_new_value}' for new {i}, but got {new_value}\"\nE               AssertionError: Expected '1e-10' for new Cleaning Agent Residue Verification, Location Name: Dryers(Indirect)(Rinse), \nE                       Sample ID: EQM-16/CAR-10, Cleaning Agent: Methanol, Observed Residue, position: 5, but got 1e-10\nE               assert 1e-10 == '1e-10'\n\ntests\\unit\\audit_logs\\test_audit_logs.py:121: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733050257392,"stop":1733050257678,"duration":286},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733050257678,"stop":1733050257885,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_config_run_form_filed_cleaning_agent_resdiue_detail_inspection_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"26520-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cw8jmuk","url":"https://app.clickup.com/t/86cw8jmuk","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_config_run_form_filed_cleaning_agent_resdiue_detail_inspection_audit_logs_details","scenario","audit_logs_scenarios","second_to_last","run(order=-2)"]},"source":"1f5de9e70ee7b0ad.json","parameterValues":[]}