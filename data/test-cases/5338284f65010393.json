{"uid":"5338284f65010393","name":"Create Inspection on Equipment & Validate the cleaning agent Residue Verification cleaning agent Samples","fullName":"tests.scenarios.multi_production_protocol.inspection.test_multi_production_protocol_inspection.TestInspectionMultiProductionProtocol#test_create_inspection_validate_the_acceptance_limit_cleaning_agent","historyId":"a36073920616a23a62428b50cc4c6eca","time":{"start":1733039480182,"stop":1733039537529,"duration":57347},"description":"This test case tests API to create an inspection on equipment and validate the cleaning agent residue verification cleaning agent samples","descriptionHtml":"<p>This test case tests API to create an inspection on equipment and validate the cleaning agent residue verification cleaning agent samples</p>\n","status":"failed","statusMessage":"AssertionError: Acceptance limit from API response EQM-2/CA-1: 170901.4287525633 is not equal to calculated limits 170910.043821435","statusTrace":"self = <test_multi_production_protocol_inspection.TestInspectionMultiProductionProtocol object at 0x00000251D0ECC990>\ninspection_setup_method = ({'acceptance_limit_dict': {'EQM-2/CA-1': 170901.4287525633, 'EQM-2/CA-2': 103919.26827109238, 'EQM-2/CA-3': 45.3, 'EQ...'name': 'Protocol-T6WT', ...}, 'additional_test': 'Conductivity', 'at_verification': 'conductivity_verification', ...})\n\n    @allure.title(\"Create Inspection on Equipment & Validate the cleaning agent Residue Verification cleaning agent \"\n                  \"Samples\")\n    @allure.description(\"This test case tests API to create an inspection on equipment and validate the cleaning agent \"\n                        \"residue verification cleaning agent samples\")\n    @allure.link(\"https://app.clickup.com/t/86cungaj9\")\n    @pytest.mark.create_inspection_validate_the_acceptance_limit_cleaning_agent\n    def test_create_inspection_validate_the_acceptance_limit_cleaning_agent(self, inspection_setup_method):\n        inspection_data, equipment_info, protocol_equipment = inspection_setup_method\n        get_inspection = self.multi_production_study.get_single_study_details(inspection_data)[\"response\"]\n        get_inspection = json.loads(get_inspection)[\"result\"]\n    \n        for i in range(len(equipment_info)):\n            inspection_data.update({\"inspection_id\": get_inspection[\"inspections\"][i][\"id\"]})\n            inspection = self.multi_production_inspection.get_inspection_detail(inspection_data)[\"response\"]\n            inspection = json.loads(inspection)[\"result\"]\n    \n            acceptance_limit_dict = {residue['sampleExternalId']: residue['acceptanceLimit'] for residue in\n                                     inspection[\"cleaningAgent\"][\"residues\"]}\n    \n            for j in range(len(inspection[\"cleaningAgent\"][\"residues\"])):\n                sample_id = inspection[\"cleaningAgent\"][\"residues\"][j][\"sampleExternalId\"]\n                method_type = inspection[\"cleaningAgent\"][\"residues\"][j][\"methodType\"]\n    \n                inspection_data.update({\"external_id\": sample_id.split(\"/\")[0], \"sample_type\": \"Cleaning Agent\",\n                                        \"method_type\": method_type, \"sample_id\": sample_id,\n                                        \"acceptance_limit_dict\": acceptance_limit_dict,\n                                        \"protocol_equipment\": protocol_equipment,\n                                        \"index\": j})\n    \n>               self.multi_production_inspection.compare_the_cleaning_agent_acceptance_limit(inspection_data)\n\ntests\\scenarios\\multi_production_protocol\\inspection\\test_multi_production_protocol_inspection.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'acceptance_limit_dict': {'EQM-2/CA-1': 170901.4287525633, 'EQM-2/CA-2': 103919.26827109238, 'EQM-2/CA-3': 45.3, 'EQM... ...], 'create_inspection_payload': {'authorId': 6, 'caseStudyId': 2, 'equipmentId': 37, 'productionId': 27, ...}, ...}\n\n    @staticmethod\n    def compare_the_cleaning_agent_acceptance_limit(data):\n        if data[\"protocol_equipment\"][\"direct_policy\"] is not \"custom\":\n            sheet_name = \"cleaning_agent_sample_limits\"\n        else:\n            sheet_name = data[\"external_id\"] + \"_samples_custom\"\n    \n        acceptance_limit = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name,\n                                                                   data[\"columns\"], data[\"sample_type\"])\n    \n        acceptance_limit_dict = dict(zip(acceptance_limit[\"sample id\"], acceptance_limit[\"swab_rinse_ppm\"]))\n    \n        for key, value in data[\"acceptance_limit_dict\"].items():\n            if key in acceptance_limit_dict:\n                if data.get(\"unit_data\") == const.DEFAULT_SURFACE_AREA_SQM[\"default_unit\"]:\n                    assert round(acceptance_limit_dict[key] * const.CONVERT_SQCM_SQM,\n                                 3) == round(value, 3), \\\n                        (f\"Acceptance limit from API response {key}: {value} is not equal to calculated \"\n                         f\"limits {acceptance_limit_dict[key]}\")\n                elif data.get(\"unit_data\") == const.DEFAULT_SURFACE_AREA_SQIN[\"default_unit\"]:\n                    assert round(acceptance_limit_dict[key] * const.CONVERT_SQCM_SQIN,\n                                 3) == round(value, 3), \\\n                        (f\"Acceptance limit from API response {key}: {value} is not equal to calculated \"\n                         f\"limits {acceptance_limit_dict[key]}\")\n                else:\n>                   assert round(acceptance_limit_dict[key], 3) == round(value, 3), \\\n                        (f\"Acceptance limit from API response {key}: {value} is not equal to calculated \"\n                         f\"limits {acceptance_limit_dict[key]}\")\nE                   AssertionError: Acceptance limit from API response EQM-2/CA-1: 170901.4287525633 is not equal to calculated limits 170910.043821435\n\ntests\\unit\\inspection_multi_production\\inspection_multi_production_protocol.py:168: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":6,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733038443170,"stop":1733038443648,"duration":478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733038443648,"stop":1733038443948,"duration":300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"inspection_setup_method","time":{"start":1733039385460,"stop":1733039427222,"duration":41762},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"create_inspection_validate_the_acceptance_limit_cleaning_agent"},{"name":"tag","value":"inspection_multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.inspection"},{"name":"suite","value":"test_multi_production_protocol_inspection"},{"name":"subSuite","value":"TestInspectionMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"25196-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.inspection.test_multi_production_protocol_inspection"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cungaj9","url":"https://app.clickup.com/t/86cungaj9","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"24a33bd54f40d056","status":"failed","statusDetails":"AssertionError: Acceptance limit from API response EQM-3/CA-5: 3535885.7738179043 is not equal to calculated limits 3535903.18167304","time":{"start":1732987040607,"stop":1732987052894,"duration":12287}},{"uid":"18c72c9fda819810","status":"failed","statusDetails":"AssertionError: Acceptance limit from API response EQM-19/CA-1: 5.689912290590049 is not equal to calculated limits 0.3413942788","time":{"start":1732986844266,"stop":1732986844939,"duration":673}},{"uid":"f04c9f178babf0ec","status":"failed","statusDetails":"AssertionError: Acceptance limit from API response EQM-19/CA-1: 5.689912290590049 is not equal to calculated limits 0.3413942788","time":{"start":1732986513311,"stop":1732986514091,"duration":780}},{"uid":"2f83a9c00d3ea791","status":"failed","statusDetails":"AssertionError: Acceptance limit from API response EQM-19/CA-1: 5.689912290590049 is not equal to calculated limits 0.3413942788","time":{"start":1732986316340,"stop":1732986317101,"duration":761}},{"uid":"b2eaac31dd800987","status":"failed","statusDetails":"AssertionError: Acceptance limit from API response EQM-19/CA-3: 26.55 is not equal to calculated limits 0.5900000000000001","time":{"start":1732986060458,"stop":1732986061124,"duration":666}},{"uid":"1af89d4bfa8fbbf0","status":"failed","statusDetails":"AssertionError: Acceptance limit from API response EQM-3/CA-5: 3535885.7738179043 is not equal to calculated limits 3535903.18167304","time":{"start":1732976052714,"stop":1732976112778,"duration":60064}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","create_inspection_validate_the_acceptance_limit_cleaning_agent","inspection_multi_production_protocol"]},"source":"5338284f65010393.json","parameterValues":[]}