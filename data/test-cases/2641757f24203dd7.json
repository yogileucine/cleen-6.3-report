{"uid":"2641757f24203dd7","name":"Test Production wise SAL for All Criteria with Global Recovery Factor","fullName":"tests.scenarios.test_limit_productions.TestLimitOnProduction#test_validate_formulation_production_sal_productwise_global_recovery_all_criteria","historyId":"ba6d60786687ae75a09fdee9c4f62c88","time":{"start":1734427883873,"stop":1734427887486,"duration":3613},"description":"This test case tests Production wise SAL when Global Recovery Factor when All Criteria in Policy is selected for each Equipment mapped to Production","descriptionHtml":"<p>This test case tests Production wise SAL when Global Recovery Factor when All Criteria in Policy is selected for each Equipment mapped to Production</p>\n","status":"broken","statusMessage":"TypeError: argument of type 'NoneType' is not iterable","statusTrace":"self = <test_limit_productions.TestLimitOnProduction object at 0x7a815db08260>\n\n    @allure.title(\"Test Production wise SAL for All Criteria with Global Recovery Factor\")\n    @allure.description(\"This test case tests Production wise SAL when Global Recovery Factor when\"\n                        \" All Criteria in Policy is selected for each Equipment mapped to Production\")\n    @allure.link(\"https://app.clickup.com/t/2te95kw\")\n    @pytest.mark.formulation\n    @pytest.mark.validate_formulation_production_sal_productwise_global_recovery_all_criteria\n    def test_validate_formulation_production_sal_productwise_global_recovery_all_criteria(self):\n        global_recovery_percentage = Excel.read_excel_col_name_row_number(const.get_master_data(),\n                                                                          \"config\",\n                                                                          \"global_recovery_percentage\",\n                                                                          2)\n        policy_data = {\"useDosage\": True, \"useToxicity\": True, \"useProductLimit\": True, \"useARL\": True,\n                       \"globalRecoveryPercentage\": global_recovery_percentage,\n                       \"useGlobalRecoveryPercentage\": True}\n        data = {}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        data.update({\"update_policy_payload\": update_policy})\n        if get_policy != update_policy[\"data\"]:\n            self.update_active_policy.test_update_active_policy(data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n    \n        production_id = PRODUCTION_LIST[\"production_id\"]\n        for prod in production_id:\n            data.update({\"production\": prod})\n            sheet_name = prod.lower() + \"_productwise_sal\"\n            columns = [\"Equipment ID\", \"global_recovery_percentage_sal_mg_sqcm\"]\n            manually_calculated_limit, lowest_manually_calculated_sal = self.calculated_sal_excel(sheet_name, columns)\n            data.update({\"production\": prod})\n            sal = self.get_production.get_production_sal_each_equipment(data)\n>           lowest_sal = self.get_production.get_production_lowest_sal(data)\n\ntests/scenarios/test_limit_productions.py:387: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.production.test_production.TestProduction object at 0x7a815dcbfe90>\ndata = {'production': 'PRD1-P2', 'update_policy_payload': {'data': {'arl': {'unit': 'ppm', 'value': 10}, 'enabled': True, 'facilityId': '49a59d80-b637-44c5-b33b-4e7c9e363f96', 'globalRecoveryPercentage': 80, ...}, 'reason': 'Test Automation'}}\n\n    def get_production_lowest_sal(self, data):\n        global PRODUCTIONS\n        PRODUCTIONS = self.test_get_productions(None)[\"response\"]\n        PRODUCTIONS = json.loads(PRODUCTIONS)\n        total_record = PRODUCTIONS[\"totalRecords\"]\n        total_page = round((total_record + 5) / 10)\n        sal = \"#N/A\"\n        production_id = data[\"production\"]\n        production_data = self.find_each_production_data(total_page, production_id)\n>       if \"sal\" in production_data:\nE       TypeError: argument of type 'NoneType' is not iterable\n\ntests/unit/production/test_production.py:372: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1734427407453,"stop":1734427407785,"duration":332},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1734427407786,"stop":1734427407992,"duration":206},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"This method will setup the cleaning limit policy for actives","time":{"start":1734427856122,"stop":1734427858400,"duration":2278},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_formulation_production_sal_productwise_global_recovery_all_criteria"},{"name":"tag","value":"formulation"},{"name":"tag","value":"production_limits"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_limit_productions"},{"name":"subSuite","value":"TestLimitOnProduction"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"1861087-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_limit_productions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/2te95kw","url":"https://app.clickup.com/t/2te95kw","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_formulation_production_sal_productwise_global_recovery_all_criteria","scenario","formulation","production_limits"]},"source":"2641757f24203dd7.json","parameterValues":[]}