{"uid":"535c0260dd7bddab","name":"Validate the audit logs details for updating active cleaning limit policy","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_update_active_cleaning_limit_policy_validate_audit_logs_details","historyId":"1866473c1f47c6c213b5f5413eb61b11","time":{"start":1733044478034,"stop":1733044480647,"duration":2613},"description":"This test case test API to validate the updating active cleaning limit policy","descriptionHtml":"<p>This test case test API to validate the updating active cleaning limit policy</p>\n","status":"failed","statusMessage":"AssertionError: Expected 'The lowest SAL on the equipment' for old Cleaning Limit for an equipment, but got None\nassert None == 'The lowest SAL on the equipment'","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x00000251CFD73CD0>\n\n    @allure.title(\"Validate the audit logs details for updating active cleaning limit policy\")\n    @allure.description(\"This test case test API to validate the updating active cleaning limit policy\")\n    @allure.link(\"https://app.clickup.com/t/86cvt21hh\")\n    @pytest.mark.update_active_cleaning_limit_policy_validate_audit_logs_details\n    def test_update_active_cleaning_limit_policy_validate_audit_logs_details(self):\n        time_stamp = None\n        global_recovery_percentage = Excel.read_excel_col_name_row_number(const.get_master_data(),\n                                                                          \"config\",\n                                                                          \"global_recovery_percentage\",\n                                                                          2)\n        upper_limit = Excel.read_excel_col_name_row_number(const.get_master_data(),\n                                                           \"config\", \"upper_limit\", 2)\n        columns = [\"upper_swab_sample_limit\", \"upper_rinse_sample_limit\"]\n        excel_upper_cap_active = Excel.read_excel_columns(const.get_master_data(), \"config\", columns)\n        excel_swab_sampling_limit = excel_upper_cap_active[\"upper_swab_sample_limit\"][0]\n        excel_rinse_sampling_limit = excel_upper_cap_active[\"upper_rinse_sample_limit\"][0]\n        policy_data = {\"useProductLimit\": True, \"useDosage\": True, \"useToxicity\": False, \"useARL\": True,\n                       \"salMassUnit\": \"ug\", \"globalRecoveryPercentage\": global_recovery_percentage,\n                       \"useGlobalRecoveryPercentage\": True, \"residueLimit\": upper_limit, \"ignoreCombo\": True,\n                       \"useResidueLimit\": True,\n                       \"useSampleLimit\": True, \"swabUpperCapActive\": excel_swab_sampling_limit,\n                       \"rinseUpperCapActive\": excel_rinse_sampling_limit, \"swabSampleUnit\": \"ppm\",\n                       \"rinseSampleUnit\": \"ppm\", \"useSwabPerSampleLimit\": False, \"useRinsePerSampleLimit\": False}\n        data = {}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        data.update({\"update_policy_payload\": update_policy})\n        if get_policy != update_policy[\"data\"]:\n            time_stamp = self.update_active_policy.test_update_active_policy(data)[\"timestamp\"]\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"CleaningPolicy\")\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            time_stamp = str(time_stamp)\n            action_exists = result.get(\"action\") is not None\n            domain_is_default_unit = result.get(\"domain\") == \"CleaningPolicy\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if action_exists and domain_is_default_unit:\n>               self.validate_audit_logs.assert_audit_diff(audit_diff, self.equipment_wise,\n                                                           \"The lowest SAL on the equipment\",\n                                                           \"The SAL of the validation product\")\n\ntests\\scenarios\\audit_logs\\test_audit_logs_scenarios.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naudit_diff = {'ARL': {'type': 'unchanged'}, 'Active to Active Policy Selection Preference': {'type': 'unchanged'}, 'Cleaning Limit ...n equipment': {'type': 'unchanged'}, 'Concentration Limit Unit For Rinse Limit In Reports': {'type': 'unchanged'}, ...}\nkey = 'Cleaning Limit for an equipment', expected_old_value = 'The lowest SAL on the equipment', expected_new_value = 'The SAL of the validation product'\n\n    @staticmethod\n    def assert_audit_diff(audit_diff, key, expected_old_value, expected_new_value):\n        old_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"old\", {}).get(\"value\")\n        new_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"new\", {}).get(\"value\")\n    \n>       assert old_value == expected_old_value, f\"Expected '{expected_old_value}' for old {key}, but got {old_value}\"\nE       AssertionError: Expected 'The lowest SAL on the equipment' for old Cleaning Limit for an equipment, but got None\nE       assert None == 'The lowest SAL on the equipment'\n\ntests\\unit\\audit_logs\\test_audit_logs.py:128: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733038443170,"stop":1733038443648,"duration":478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733038443648,"stop":1733038443948,"duration":300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"update_active_cleaning_limit_policy_validate_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"25196-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cvt21hh","url":"https://app.clickup.com/t/86cvt21hh","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","audit_logs_scenarios","second_to_last","run(order=-2)","update_active_cleaning_limit_policy_validate_audit_logs_details"]},"source":"535c0260dd7bddab.json","parameterValues":[]}