{"uid":"b55ffa57cd2e2ed0","name":"Validate the absent on sample limits of Inspection Endotoxin residue verification when select zero in microbial policy","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol#test_validate_endotoxin_residue_limits_absent_zero_inspection","historyId":"46c9ac8792fe11cf76dd10f658634aa4","time":{"start":1733033890402,"stop":1733033904283,"duration":13881},"description":"This test case tests API to Validate the absent on sample limits of Inspection Endotoxin residue verification when select zero in microbial policy","descriptionHtml":"<p>This test case tests API to Validate the absent on sample limits of Inspection Endotoxin residue verification when select zero in microbial policy</p>\n","status":"broken","statusMessage":"KeyError: 'study_equipments'","statusTrace":"self = <test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol object at 0x000002CC38023A50>\n\n    @allure.title(\"Validate the absent on sample limits of Inspection Endotoxin residue verification when select zero \"\n                  \"in microbial policy\")\n    @allure.description(\"This test case tests API to Validate the absent on sample limits of Inspection Endotoxin \"\n                        \"residue verification when select zero in microbial policy\")\n    @allure.link(\"https://app.clickup.com/t/86cuugeew\")\n    @pytest.mark.formulation  # bop = based on policy\n    @pytest.mark.validate_endotoxin_residue_limits_absent_zero_inspection\n    def test_validate_endotoxin_residue_limits_absent_zero_inspection(self):\n        protocol = self.test_validate_endotoxin_residue_sample_limits_absent_zero()\n    \n>       inspection_data, equipment_info, protocol = self.multi_production_inspection.create_inspection_on_study(\n            protocol)\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:1297: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\inspection_multi_production\\inspection_multi_production_protocol.py:855: in create_inspection_on_study\n    protocol.update({\"create_study_from_protocol\": create_study_from_protocol(protocol)})\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'externalId': 'Protocol-B5XM', 'nam...bled': True, 'perUnitVolume': {'unit': 'ml', 'value': 10}, 'rinseLimit': 0}, ...}, 'direct_policy': 'policyBased', ...}\n\n    def create_study_from_protocol(data):\n        n = 4\n        ca_name = ''.join(random.choices(string.ascii_uppercase + string.digits, k=n))\n        return {\n            \"protocolId\": data[\"protocol_id\"],\n            \"name\": \"Study-\" + ca_name,\n            \"reason\": \"Automation Test Study\",\n            \"authorId\": data[\"user_id\"],\n>           \"equipmentIds\": data[\"study_equipments\"]\n        }\nE       KeyError: 'study_equipments'\n\npayload\\facility\\protocol_payload\\on_demand_protocol_payload.py:629: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733033467023,"stop":1733033467259,"duration":236},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733033467259,"stop":1733033467365,"duration":106},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_endotoxin_residue_limits_absent_zero_inspection"},{"name":"tag","value":"formulation"},{"name":"tag","value":"microbial_multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_production_protocol_microbial_policy_absent"},{"name":"subSuite","value":"TestMicrobialMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"8352-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuugeew","url":"https://app.clickup.com/t/86cuugeew","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_endotoxin_residue_limits_absent_zero_inspection","scenario","formulation","microbial_multi_production_protocol"]},"source":"b55ffa57cd2e2ed0.json","parameterValues":[]}