{"uid":"b8a5b9c421e0f794","name":"Validate the audit logs details for Unarchive analytical method from master data","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_unarchive_analytical_master_data_audit_logs_details","historyId":"98fda53a0eed98ca05693df4c5bdb56b","time":{"start":1733050270989,"stop":1733050271220,"duration":231},"description":"This test case test API to Validate the audit logs details for Unarchive analytical method from master data","descriptionHtml":"<p>This test case test API to Validate the audit logs details for Unarchive analytical method from master data</p>\n","status":"failed","statusMessage":"AssertionError: Expected '0.13 ppm' for new LOD, but got 0.126 ppm\nassert '0.126 ppm' == '0.13 ppm'\n  - 0.13 ppm\n  ?    ^\n  + 0.126 ppm\n  ?    ^^","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x00000280D2057BD0>\n\n    @allure.title(\"Validate the audit logs details for Unarchive analytical method from master data\")\n    @allure.description(\"This test case test API to Validate the audit logs details for Unarchive analytical method \"\n                        \"from master data\")\n    @allure.link(\"https://app.clickup.com/t/86cvz7gk6\")\n    @pytest.mark.validate_unarchive_analytical_master_data_audit_logs_details\n    def test_validate_unarchive_analytical_master_data_audit_logs_details(self):\n        master_data = self.master_data_analytical_method.test_add_analytical_method_master_data_details()\n        master_data_detail = master_data[\"payload\"]\n        time_stamp = master_data[\"timestamp\"]\n    \n        rinse_recovery_study_template_area = json.loads(master_data_detail[\"rinseRecoveryStudyTemplateArea\"])\n        rinse_recovery_study_vol = json.loads(master_data_detail[\"rinseRecoveryStudyVolume\"])\n        solvent_quantity = json.loads(master_data_detail[\"solventQuantity\"])\n    \n        lod = round(float(master_data_detail[\"LOD\"]), 2)\n        loq = round(float(master_data_detail[\"LOQ\"]), 4)\n    \n        self.master_data_analytical_method.test_archive_analytical_method_master_data({\"analytical_method_id\":\n                                                                                           master_data_detail[\n                                                                                               \"methodId\"]})\n    \n        self.master_data_analytical_method.test_unarchive_analytical_method_master_data_details({\"analytical_method_id\":\n                                                                                                     master_data_detail[\n                                                                                                         \"methodId\"]})\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"AnalyticalMethod\",\n                                                                         action=const.LOG_ACTION_ARCHIVE)\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"AnalyticalMethod\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if action_exists and domain_is_additional_policy:\n>               self.validate_audit_logs.assert_audit_diff(audit_diff, \"LOD\", None, str(lod) + \" \" + const.PPM)\n\ntests\\scenarios\\audit_logs\\test_audit_logs_scenarios.py:1426: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naudit_diff = {'ID': {'data': {'new': {'value': 'AM-S1NQN'}, 'old': {'value': 'AM-S1NQN'}}, 'type': 'updated'}, 'LOD': {'data': {'ne...lue': '0.273 ppm'}}, 'type': 'created'}, 'Method Id': {'data': {'new': {'value': 'AM-S1NQN'}}, 'type': 'created'}, ...}\nkey = 'LOD', expected_old_value = None, expected_new_value = '0.13 ppm'\n\n    @staticmethod\n    def assert_audit_diff(audit_diff, key, expected_old_value, expected_new_value):\n        old_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"old\", {}).get(\"value\")\n        new_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"new\", {}).get(\"value\")\n    \n        assert old_value == expected_old_value, f\"Expected '{expected_old_value}' for old {key}, but got {old_value}\"\n>       assert new_value == expected_new_value, f\"Expected '{expected_new_value}' for new {key}, but got {new_value}\"\nE       AssertionError: Expected '0.13 ppm' for new LOD, but got 0.126 ppm\nE       assert '0.126 ppm' == '0.13 ppm'\nE         - 0.13 ppm\nE         ?    ^\nE         + 0.126 ppm\nE         ?    ^^\n\ntests\\unit\\audit_logs\\test_audit_logs.py:129: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733050257392,"stop":1733050257678,"duration":286},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733050257678,"stop":1733050257885,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_unarchive_analytical_master_data_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"26520-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cvz7gk6","url":"https://app.clickup.com/t/86cvz7gk6","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2741576cfe5fa251","status":"failed","statusDetails":"AssertionError: Expected '0.18 ppm' for new LOD, but got 0.185 ppm\nassert '0.185 ppm' == '0.18 ppm'\n  - 0.18 ppm\n  + 0.185 ppm\n  ?     +","time":{"start":1733044491803,"stop":1733044492233,"duration":430}},{"uid":"c83206bc39d63df6","status":"failed","statusDetails":"AssertionError: Expected '0.14 ppm' for new LOD, but got 0.139 ppm\nassert '0.139 ppm' == '0.14 ppm'\n  - 0.14 ppm\n  ?    ^\n  + 0.139 ppm\n  ?    ^^","time":{"start":1732985079942,"stop":1732985080230,"duration":288}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","audit_logs_scenarios","second_to_last","validate_unarchive_analytical_master_data_audit_logs_details","run(order=-2)"]},"source":"b8a5b9c421e0f794.json","parameterValues":[]}