{"uid":"28185af37dc85c9f","name":"Create Protocol for microbial residue verification for non split","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_create_microbial_residue_verification_protocol_sqin_ml","historyId":"7230af3dc683b3fefe6576b5e38775c6","time":{"start":1732978218996,"stop":1732978233006,"duration":14010},"description":"This test case tests API to Create Protocol microbial residue verification for split when select based on policy for fungal & bacterial of direct, and  for bacterial & fungal of Indirect when default surface unit is sqin and volume is ml","descriptionHtml":"<p>This test case tests API to Create Protocol microbial residue verification for split when select based on policy for fungal &amp; bacterial of direct, and  for bacterial &amp; fungal of Indirect when default surface unit is sqin and volume is ml</p>\n","status":"failed","statusMessage":"AssertionError: Direct Swab perUnitAreaAndVolume Values 41850.084 with 41850.0 Do Not Match","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000001CD08419010>\n\n    @allure.title(\"Create Protocol for microbial residue verification for non split\")\n    @allure.description(\"This test case tests API to Create Protocol microbial residue verification for split \"\n                        \"when select based on policy for fungal & bacterial of direct, and  for bacterial & \"\n                        \"fungal of Indirect when default surface unit is sqin and volume is ml\")\n    @allure.link(\"https://app.clickup.com/t/86cuhb85m\")\n    @pytest.mark.create_microbial_residue_verification_protocol_sqin_ml\n    def test_create_microbial_residue_verification_protocol_sqin_ml(self):\n        policy_data = {\"split_bacterial\": True, \"direct_fungal_policy\": \"policyBased\",\n                       \"direct_bacterial_policy\": \"policyBased\", \"indirect_fungal_policy\": \"policyBased\",\n                       \"indirect_bacterial_policy\": \"policyBased\", \"vol_unit\": const.DEFAULT_VOLUME_ML,\n                       \"direct_endo_policy\": \"policyBased\", \"indirect_endo_policy\": \"policyBased\",\n                       \"surface_unit\": const.DEFAULT_SURFACE_AREA_SQIN,\n                       \"microbial_verification\": \"microbial_verification\"}\n        surface_area_unit = const.DEFAULT_SURFACE_AREA_SQIN[\"default_unit\"]\n        data, updated_data = self.protocol_microbial_split_helper(policy_data)\n>       self.protocol_microbial.compare_microbial_limits_split(updated_data, \"direct\", \"fungal\",\n                                                               surface_unit=surface_area_unit)\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_prodcution_protocol.py:2406: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.protocols.protocol_microbial_residue_verification.ProtocolMicrobialAcceptanceCriteria object at 0x000001CD0736E850>\ndata = {'direct': {'bacterial': {'equipments': {'77': {'enabled': True, 'perUnitArea': {'unit': 'sqcm', 'value': 60000}, 'per...value': 200000}, 'perUnitVolume': {'unit': 'ml', 'value': 22}, 'rinseLimit': 36, ...}, ...}, 'policy': 'policyBased'}}}\nresponse_type = 'direct', microbial_type = 'fungal', method_type = 'Swab', surface_unit = 'sqin', volume_unit = 'ml'\n\n    def compare_microbial_limits_split(self, data, response_type, microbial_type, method_type=\"swab\",\n                                       surface_unit=\"sqcm\", volume_unit=\"ml\"):\n        microbial_policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        policy_data = json.loads(microbial_policy)\n    \n        first_response = self.extract_values(policy_data, response_type)\n        second_response = self.get_limits(data, response_type, microbial_type)\n    \n        # Extract microbial values from the first response\n        if method_type == \"swab\":\n            method_type = \"Swab\"\n            method_limit = \"swab_limit\"\n        else:\n            method_type = \"Rinse\"\n            method_limit = \"rinse_limit\"\n    \n        swab_response = first_response.get(f'{response_type.capitalize()} - {method_type}', {})\n        microbial_swab_first_response = self.extract_microbial_values(swab_response, microbial_type)\n        per_unit_area_and_volume_first_response = None\n        if microbial_type == \"fungal\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'fungal_per_unit_volume')\n    \n        if microbial_type == \"bacterial\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'bacterial_per_unit_volume')\n    \n        # Extract microbial values from the second response more explicitly\n        second_response_key = list(second_response.keys())[0] if second_response else None\n        microbial_swab_second_response = second_response.get(second_response_key, {}).get(method_limit, {}).get('value')\n        per_unit_area_and_volume_second_response = (\n            second_response.get(second_response_key, {}).get(method_limit, {}).get('perUnitArea', {}).get('value'))\n    \n        if surface_unit == \"sqm\":\n            per_unit_area_and_volume_second_response = per_unit_area_and_volume_second_response * 0.0001\n        if surface_unit == \"sqin\":\n            per_unit_area_and_volume_second_response = per_unit_area_and_volume_second_response * 0.155\n        if volume_unit == \"l\":\n            per_unit_area_and_volume_second_response = per_unit_area_and_volume_second_response * 0.001\n    \n        # Compare values with assert statements\n        if microbial_swab_first_response is not None and microbial_swab_second_response is not None:\n            assert round(microbial_swab_first_response, 3) == round(microbial_swab_second_response, 3), \\\n                (f\"{response_type.capitalize()} {method_type} {microbial_type.capitalize()} \"\n                 f\"Values {round(microbial_swab_first_response, 3)} with {round(microbial_swab_second_response, 3)}\"\n                 f\"Do Not Match\")\n        if per_unit_area_and_volume_first_response is not None and per_unit_area_and_volume_second_response is not None:\n>           assert round(per_unit_area_and_volume_first_response, 3) == round(per_unit_area_and_volume_second_response,\n                                                                              3), \\\n                (f\"{response_type.capitalize()} {method_type} perUnitAreaAndVolume \"\n                 f\"Values {round(per_unit_area_and_volume_first_response, 3)} with \"\n                 f\"{round(per_unit_area_and_volume_second_response,3)} \"\n                 f\"Do Not Match\")\nE           AssertionError: Direct Swab perUnitAreaAndVolume Values 41850.084 with 41850.0 Do Not Match\n\ntests\\unit\\protocols\\protocol_microbial_residue_verification.py:394: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1732974915848,"stop":1732974916198,"duration":350},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1732974916198,"stop":1732974916326,"duration":128},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"create_microbial_residue_verification_protocol_sqin_ml"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"22492-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuhb85m","url":"https://app.clickup.com/t/86cuhb85m","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","create_microbial_residue_verification_protocol_sqin_ml"]},"source":"28185af37dc85c9f.json","parameterValues":[]}