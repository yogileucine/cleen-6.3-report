{"uid":"8a062c55b9f17a92","name":"Validate the sample limits of Endotoxin residue verification for direct indirect bop","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol#test_validate_bioburden_residue_rinse_limits_absent_zero_split_inspection","historyId":"535f8456cc0493aeb9733c7f99ec204f","time":{"start":1733033424193,"stop":1733033433302,"duration":9109},"description":"This test case tests API to Create Protocol for Endotoxin residue verification and validate the sample limits when select based on policy for direct and indirect","descriptionHtml":"<p>This test case tests API to Create Protocol for Endotoxin residue verification and validate the sample limits when select based on policy for direct and indirect</p>\n","status":"failed","statusMessage":"AssertionError: Direct Swab Fungal Values 38 Do Not Match with 30","statusTrace":"self = <test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol object at 0x0000023C1596A450>\n\n    @allure.title(\"Validate the sample limits of Endotoxin residue verification for direct indirect bop\")\n    @allure.description(\"This test case tests API to Create Protocol for Endotoxin residue verification and validate \"\n                        \"the sample limits when select based on policy for direct and indirect\")\n    @allure.link(\"https://app.clickup.com/t/86cuv1vzb\")\n    @pytest.mark.formulation  # bop = based on policy\n    @pytest.mark.validate_bioburden_residue_rinse_limits_absent_zero_split_inspection\n    def test_validate_bioburden_residue_rinse_limits_absent_zero_split_inspection(self):\n>       protocol = self.test_validate_bioburden_endotoxin_residue_rinse_sample_limits_absent_zero_split()\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:1392: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:1001: in test_validate_bioburden_endotoxin_residue_rinse_sample_limits_absent_zero_split\n    data = self.test_bioburden_endotoxin_absent_zero_rinse_split()\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:622: in test_bioburden_endotoxin_absent_zero_rinse_split\n    self.protocol_bioburden.compare_bioburden_limits_split(updated_data, \"direct\", \"fungal\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.protocols.protocol_bioburden_residue_verification.ProtocolBioburdenAcceptanceCriteria object at 0x0000023C15902710>\ndata = {'direct': {'bacterial': {'equipments': {'101': {'enabled': True, 'perUnitArea': {'unit': 'sqcm', 'value': 18}, 'perUn...m', 'value': 25}, 'perUnitVolume': {'unit': 'ml', 'value': 25}, 'rinseLimit': 0, ...}, ...}, 'policy': 'policyBased'}}}\nresponse_type = 'direct', microbial_type = 'fungal', surface_unit = 'sqcm', volume_unit = 'ml'\n\n    def compare_bioburden_limits_split(self, data, response_type, microbial_type, surface_unit=\"sqcm\",\n                                       volume_unit=\"ml\"):\n        microbial_policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        policy_data = json.loads(microbial_policy)\n    \n        first_response = self.extract_values(policy_data, response_type)\n        second_response = self.get_limits(data, response_type, microbial_type)\n    \n        # Extract microbial values from the first response\n        swab_response = first_response.get(f'{response_type.capitalize()} - Swab', {})\n        microbial_swab_first_response = self.extract_microbial_values(swab_response, microbial_type)\n        per_unit_area_and_volume_first_response = None\n        if microbial_type == \"fungal\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'fungal_per_unit_volume')\n    \n        if microbial_type == \"bacterial\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'bacterial_per_unit_volume')\n    \n        # Extract microbial values from the second response more explicitly\n        second_response_key = list(second_response.keys())[0] if second_response else None\n        microbial_swab_second_response = second_response.get(second_response_key, {}).get('swab_limit', {}).get('value')\n        per_unit_area_and_volume_second_response = second_response.get(\n            second_response_key, {}).get('swab_limit', {}).get('perUnitArea', {}).get('value')\n    \n        if surface_unit == \"sqm\":\n            per_unit_area_and_volume_second_response = per_unit_area_and_volume_second_response * 0.0001\n        if surface_unit == \"sqin\":\n            per_unit_area_and_volume_second_response = per_unit_area_and_volume_second_response * 0.155\n        if volume_unit == \"l\":\n            per_unit_area_and_volume_second_response = per_unit_area_and_volume_second_response * 0.001\n    \n        # Compare values with assert statements\n        if microbial_swab_first_response is not None and microbial_swab_second_response is not None:\n>           assert round(microbial_swab_first_response, 3) == round(microbial_swab_second_response, 3), \\\n                (\n                    f\"{response_type.capitalize()} Swab {microbial_type.capitalize()} Values {microbial_swab_first_response}\"\n                    f\" Do Not Match with {microbial_swab_second_response}\")\nE           AssertionError: Direct Swab Fungal Values 38 Do Not Match with 30\n\ntests\\unit\\protocols\\protocol_bioburden_residue_verification.py:356: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733033423449,"stop":1733033423974,"duration":525},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733033423975,"stop":1733033424191,"duration":216},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_bioburden_residue_rinse_limits_absent_zero_split_inspection"},{"name":"tag","value":"formulation"},{"name":"tag","value":"microbial_multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_production_protocol_microbial_policy_absent"},{"name":"subSuite","value":"TestMicrobialMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"23396-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuv1vzb","url":"https://app.clickup.com/t/86cuv1vzb","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","validate_bioburden_residue_rinse_limits_absent_zero_split_inspection","formulation","microbial_multi_production_protocol"]},"source":"8a062c55b9f17a92.json","parameterValues":[]}