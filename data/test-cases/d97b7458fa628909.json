{"uid":"d97b7458fa628909","name":"Validate the absent on Protocol bioburden Endotoxin residue verification when select zero in microbial policy for split rinse samples of room grade","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol#test_bioburden_endotoxin_absent_zero_rinse_split_room_grade","historyId":"e6c82faf86ae299d86b793e0aac4543d","time":{"start":1733035290871,"stop":1733035300113,"duration":9242},"description":"This test case tests API to Validate the absent on Protocol bioburden Endotoxin residue verification when select zero in microbial policy for split rinse samples of room grade","descriptionHtml":"<p>This test case tests API to Validate the absent on Protocol bioburden Endotoxin residue verification when select zero in microbial policy for split rinse samples of room grade</p>\n","status":"broken","statusMessage":"TypeError: argument of type 'NoneType' is not iterable","statusTrace":"self = <test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol object at 0x00000211F57D9750>\n\n    @allure.title(\"Validate the absent on Protocol bioburden Endotoxin residue verification when select zero in \"\n                  \"microbial policy for split rinse samples of room grade\")\n    @allure.description(\"This test case tests API to Validate the absent on Protocol bioburden Endotoxin residue \"\n                        \"verification when select zero in microbial policy for split rinse samples of room grade\")\n    @allure.link(\"https://app.clickup.com/t/86cuw0gv8\")\n    @pytest.mark.formulation\n    @pytest.mark.bioburden_endotoxin_absent_zero_rinse_split_room_grade\n    def test_bioburden_endotoxin_absent_zero_rinse_split_room_grade(self):\n        vol_unit = self.policy_microbial.default_units.test_get_default_unit(data={\"default_unit_name\": \"volume\"})[\n            \"response\"]\n        surface_unit = \\\n            self.policy_microbial.default_units.test_get_default_unit(data={\"default_unit_name\": \"surface_area\"})[\n                \"response\"]\n        unit = json.loads(vol_unit)\n        surface_unit = json.loads(surface_unit)\n        policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        policy = json.loads(policy)[\"result\"]\n    \n        volume_unit = unit[\"default_units\"][\"unit\"]\n        surface_area_unit = surface_unit[\"default_units\"][\"unit\"]\n    \n        limit_data = {\"default_endo\": 0, \"un_endo_value\": 0, \"grade_bacterial_limit\": 0, \"grade_fungal_limit\": 0,\n                      \"limit_type\": \"rinse\", \"grade\": True, \"grade_id\": self.get_room_grade_id()}\n    \n        payload = create_cleaning_limit_policy_microbial(policy, {\"splitBacteriaAndFungi\": True,\n                                                                  \"default_unit\": volume_unit,\n                                                                  \"surface_area_unit\": surface_area_unit},\n                                                         limit_data=limit_data)\n    \n        endotoxin_data = {}\n        endotoxin_data.update({\"update_policy_payload\": payload})\n        microbial_policy_update = self.policy_microbial.test_update_microbial_cleaning_limits_policy(endotoxin_data)[\n            \"response\"]\n        if microbial_policy_update:\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"bioburden_verification\": True,\n                     \"endotoxin_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n    \n        self.protocol_bioburden.PROTOCOL_EQUIPMENT = json.loads(get_equipment)\n        data.update({\"protocol_eq\": self.protocol_bioburden.PROTOCOL_EQUIPMENT})\n        equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n        equipments_ids = []\n        for i in equipments_id:\n            equipments_ids.append(i[\"equipment_id\"])\n        data.update({\"study_equipments\": equipments_ids})\n    \n        self.protocol_verification.update_inspection_protocol(data)\n    \n        direct_equipments_sal = self.protocol_bioburden.get_bioburden_direct_contact_surface_area_details(data)[\n            \"response\"]\n        self.protocol_bioburden.DIRECT_BIOBURDEN_EQUIPMENT = json.loads(direct_equipments_sal)\n        indirect_equipment_sal = self.protocol_bioburden.get_bioburden_indirect_contact_surface_area_details(data)[\n            \"response\"]\n        self.protocol_bioburden.INDIRECT_BIOBURDEN_EQUIPMENT = json.loads(indirect_equipment_sal)\n    \n        direct_equipment = self.protocol_bioburden.direct_update_policy_payload()\n        indirect_equipment = self.protocol_bioburden.indirect_update_policy_payload()\n    \n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"direct_fungal_policy\": \"policyBased\", \"direct_bacterial_policy\": \"policyBased\",\n                     \"indirect_fungal_policy\": \"policyBased\", \"indirect_bacterial_policy\": \"policyBased\"})\n        data.update({\n            \"update_bioburden_residue_verification_payload\": update_bioburden_residue_verification_fungal_bacterial_payload(\n                data)})\n    \n        updated_data = self.protocol_bioburden.update_bioburden_residue_verification_protocol(data)[\"response\"]\n        updated_data = json.loads(updated_data)[\"result\"][\"bioburdenResidueVerification\"]\n>       self.protocol_bioburden.compare_bioburden_limits_split_room_grade(updated_data,\n                                                                          self.protocol_common_method.EQUIPMENT_IDS,\n                                                                          \"direct\", \"bacterial\", \"rinse\")\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:1956: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'direct': {'bacterial': {'equipments': {'121': {'enabled': True, 'perUnitArea': {'unit': 'sqcm', 'value': 17}, 'perUn...', 'value': 26}, 'perUnitVolume': {'unit': 'ml', 'value': 24}, 'rinseLimit': 32, ...}, ...}, 'policy': 'policyBased'}}}\nequipment_ids = None, contact_type = 'direct', organism_type = 'bacterial', type_swab_rinse = 'rinse'\n\n    @staticmethod\n    def compare_bioburden_limits_split_room_grade(data, equipment_ids, contact_type, organism_type, type_swab_rinse):\n        response_data = data[contact_type][organism_type][\"equipments\"]\n        for equipment_id, data_response in response_data.items():\n            swab_limit = data_response.get('swabLimit', 1)\n            rinse_limit = data_response.get('rinseLimit', 1)\n>           if int(equipment_id) in equipment_ids:\nE           TypeError: argument of type 'NoneType' is not iterable\n\ntests\\unit\\protocols\\protocol_bioburden_residue_verification.py:795: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733035290137,"stop":1733035290661,"duration":524},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733035290661,"stop":1733035290871,"duration":210},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"bioburden_endotoxin_absent_zero_rinse_split_room_grade"},{"name":"tag","value":"formulation"},{"name":"tag","value":"microbial_multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_production_protocol_microbial_policy_absent"},{"name":"subSuite","value":"TestMicrobialMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"26716-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuw0gv8","url":"https://app.clickup.com/t/86cuw0gv8","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","formulation","bioburden_endotoxin_absent_zero_rinse_split_room_grade","microbial_multi_production_protocol"]},"source":"d97b7458fa628909.json","parameterValues":[]}