{"uid":"f2c0a40b940fcc40","name":"Validate the audit logs details for archive product from master data","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_archive_master_data_product_audit_logs_details","historyId":"5dfe02a2d15df66ad85a967816ddbe27","time":{"start":1733044489885,"stop":1733044490459,"duration":574},"description":"This test case test API to Validate the audit logs details for archive product from master data","descriptionHtml":"<p>This test case test API to Validate the audit logs details for archive product from master data</p>\n","status":"failed","statusMessage":"AssertionError: Expected '10 mg' for old Strength (Active-Auto-BKC7Z), but got 10000 ug\nassert '10000 ug' == '10 mg'\n  - 10 mg\n  + 10000 ug","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x00000251CFD7E510>\n\n    @allure.title(\"Validate the audit logs details for archive product from master data\")\n    @allure.description(\"This test case test API to Validate the audit logs details for archive product from master \"\n                        \"data\")\n    @allure.link(\"https://app.clickup.com/t/86cvyv2gy\")\n    @pytest.mark.validate_archive_master_data_product_audit_logs_details\n    def test_validate_archive_master_data_product_audit_logs_details(self):\n        master_data = self.master_data_products.test_add_product_master_data_details()\n        master_data_detail = master_data[\"payload\"]\n    \n        active_name = master_data[\"active_name\"]\n        table_weight = master_data_detail['tabletWeight']\n        ldd = master_data_detail['ldd']\n    \n        additional_fields = master_data_detail['additionalFields']\n    \n        cleanabilityAF_values = [field[\"value\"] for field in additional_fields if field[\"key\"] == \"cleanabilityAF\"]\n        productCategoryAF_values = [field[\"value\"] for field in additional_fields if\n                                    field[\"key\"] == \"productCategoryAF\"]\n        formulationAF_values = [field[\"value\"] for field in additional_fields if field[\"key\"] == \"formulationAF\"]\n        strength = master_data_detail['apis'][0]['strength']\n        data = {\"product_name\": master_data_detail[\"name\"]}\n        archive_product = self.master_data_products.test_archive_product_master_data_details(data)\n        time_stamp = archive_product[\"timestamp\"]\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"Product\",\n                                                                         action=const.LOG_ACTION_ADD)\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"Product\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if action_exists and domain_is_additional_policy:\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Apis\", active_name, const.NONE_VALUE)\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Cleanability AF\", str(cleanabilityAF_values[0]),\n                                                           None)\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Formulation AF\", str(formulationAF_values[0]),\n                                                           None)\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Ldd\", str(ldd[\"value\"]) + \" \" + ldd[\"unit\"],\n                                                           None)\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Name\", master_data_detail[\"name\"], None)\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Product Category AF\",\n                                                           str(productCategoryAF_values[0]), None)\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Product Id\", master_data_detail[\"product_id\"],\n                                                           None)\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Unit Weight\",\n                                                           str(table_weight[\"value\"]) + \" \" + table_weight[\"unit\"],\n                                                           None)\n>               self.validate_audit_logs.assert_audit_diff(audit_diff, f\"Strength ({active_name})\",\n                                                           str(strength[\"value\"]) + \" \" + strength[\"unit\"], None)\n\ntests\\scenarios\\audit_logs\\test_audit_logs_scenarios.py:1150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naudit_diff = {'Apis': {'data': {'new': {'value': '-'}, 'old': {'value': 'Active-Auto-BKC7Z'}}, 'type': 'updated'}, 'Cleanability AF..., 'ID': {'data': {'new': {'value': 'product_id-H20R0'}, 'old': {'value': 'product_id-H20R0'}}, 'type': 'updated'}, ...}\nkey = 'Strength (Active-Auto-BKC7Z)', expected_old_value = '10 mg', expected_new_value = None\n\n    @staticmethod\n    def assert_audit_diff(audit_diff, key, expected_old_value, expected_new_value):\n        old_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"old\", {}).get(\"value\")\n        new_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"new\", {}).get(\"value\")\n    \n>       assert old_value == expected_old_value, f\"Expected '{expected_old_value}' for old {key}, but got {old_value}\"\nE       AssertionError: Expected '10 mg' for old Strength (Active-Auto-BKC7Z), but got 10000 ug\nE       assert '10000 ug' == '10 mg'\nE         - 10 mg\nE         + 10000 ug\n\ntests\\unit\\audit_logs\\test_audit_logs.py:128: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733038443170,"stop":1733038443648,"duration":478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733038443648,"stop":1733038443948,"duration":300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_archive_master_data_product_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"25196-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cvyv2gy","url":"https://app.clickup.com/t/86cvyv2gy","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","validate_archive_master_data_product_audit_logs_details","audit_logs_scenarios","second_to_last","run(order=-2)"]},"source":"f2c0a40b940fcc40.json","parameterValues":[]}