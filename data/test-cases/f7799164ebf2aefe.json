{"uid":"f7799164ebf2aefe","name":"Validate the audit logs details for when update the batch detail of inspection","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_updated_batch_detail_inspection_audit_logs_details","historyId":"e32943acbe5c6c117e5f114436946539","time":{"start":1733051535016,"stop":1733051577867,"duration":42851},"description":"This test case test API to validate the audit logs details for when update the batch detail of inspection","descriptionHtml":"<p>This test case test API to validate the audit logs details for when update the batch detail of inspection</p>\n","status":"failed","statusMessage":"AssertionError: Expected '01-12-2024 16:42:57' for new Batch Manufacturing Completed At, but got None\nassert None == '01-12-2024 16:42:57'","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x000001F8223E0610>\n\n    @allure.title(\"Validate the audit logs details for when update the batch detail of inspection\")\n    @allure.description(\"This test case test API to validate the audit logs details for when update the batch detail of\"\n                        \" inspection\")\n    @allure.link(\"https://app.clickup.com/t/86cw1qtxd\")\n    @pytest.mark.validate_updated_batch_detail_inspection_audit_logs_details\n    def test_validate_updated_batch_detail_inspection_audit_logs_details(self):\n        inspection = self.inspection_multi_production_protocol.test_update_batch_details_inspection(\n            self.inspection_multi_production_protocol.inspection_setup())\n        time_stamp = datetime.utcnow().isoformat()\n    \n        payload_details = inspection[\"update_inspection_payload\"]\n    \n        formatted_date = self.validate_audit_logs.formate_date_iso(payload_details[\"manufacturingCompletedAt\"])\n    \n        expected_audit_log_msg = (f\"{inspection['inspection_external_id']}\\nStudy: {inspection['study_name']} \"\n                                  f\"(ID: {inspection['study_external_id']})\\nEquipment: \"\n                                  f\"Tablet deduster & metal detector (ID: EQM-19)\")\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"OnDemandInspection\",\n                                                                         action=const.LOG_ACTION_MODIFY)\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"OnDemandInspection\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if audit_diff.get(\"ID\", {}).get(\"data\", {}).get(\"old\", {}).get(\"value\") == inspection[\n                'inspection_external_id']:\n                if action_exists and domain_is_additional_policy:\n                    # print(payload_details[\"additionalInfo\"], \"jfd\")\n                    # self.validate_audit_logs.assert_audit_diff(audit_diff, \"Batch Details Addition Info\", \"Automation Test\",\n                    #                                            payload_details[\"additionalInfo\"])\n>                   self.validate_audit_logs.assert_audit_diff(audit_diff, \"Batch Manufacturing Completed At\", None,\n                                                               formatted_date)\n\ntests\\scenarios\\audit_logs\\test_audit_logs_scenarios.py:2227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naudit_diff = {'Batch Details, Additional Information, position: 3': {'data': {'new': {'value': 'Automation Test'}}, 'type': 'create...Equipment: Tablet deduster & metal detector (ID: EQM-19)'}, 'old': {'value': 'IN-DEC24-105'}}, 'type': 'updated'}, ...}\nkey = 'Batch Manufacturing Completed At', expected_old_value = None, expected_new_value = '01-12-2024 16:42:57'\n\n    @staticmethod\n    def assert_audit_diff(audit_diff, key, expected_old_value, expected_new_value):\n        old_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"old\", {}).get(\"value\")\n        new_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"new\", {}).get(\"value\")\n    \n        assert old_value == expected_old_value, f\"Expected '{expected_old_value}' for old {key}, but got {old_value}\"\n>       assert new_value == expected_new_value, f\"Expected '{expected_new_value}' for new {key}, but got {new_value}\"\nE       AssertionError: Expected '01-12-2024 16:42:57' for new Batch Manufacturing Completed At, but got None\nE       assert None == '01-12-2024 16:42:57'\n\ntests\\unit\\audit_logs\\test_audit_logs.py:129: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733051534414,"stop":1733051534768,"duration":354},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733051534768,"stop":1733051535016,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_updated_batch_detail_inspection_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"14196-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cw1qtxd","url":"https://app.clickup.com/t/86cw1qtxd","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"896052110d8b595e","status":"failed","statusDetails":"AssertionError: Expected 'Automation Test' for old Batch Details Addition Info, but got None\nassert None == 'Automation Test'","time":{"start":1733051470792,"stop":1733051513387,"duration":42595}},{"uid":"d354d48ddfe043ff","status":"failed","statusDetails":"AssertionError: Expected 'Automation Test' for old Batch Details Addition Info, but got None\nassert None == 'Automation Test'","time":{"start":1733051378157,"stop":1733051418516,"duration":40359}},{"uid":"394b5c4e21f47ea3","status":"failed","statusDetails":"AssertionError: Expected 'Automation Test' for new Batch Details Addition Info, but got None\nassert None == 'Automation Test'","time":{"start":1733050417588,"stop":1733050458087,"duration":40499}},{"uid":"2226d2620ed19825","status":"failed","statusDetails":"AssertionError: Expected 'Automation Test' for new Batch Details Addition Info, but got None\nassert None == 'Automation Test'","time":{"start":1733044645989,"stop":1733044688474,"duration":42485}},{"uid":"61e559f903575b46","status":"failed","statusDetails":"AssertionError: Expected '30-11-2024 22:18:03' for new Batch Manufacturing Completed At, but got 30-11-2024 22:18:02\nassert '30-11-2024 22:18:02' == '30-11-2024 22:18:03'\n  - 30-11-2024 22:18:03\n  ?                   ^\n  + 30-11-2024 22:18:02\n  ?                   ^","time":{"start":1732985239306,"stop":1732985283524,"duration":44218}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["validate_updated_batch_detail_inspection_audit_logs_details","scenario","audit_logs_scenarios","second_to_last","run(order=-2)"]},"source":"f7799164ebf2aefe.json","parameterValues":[]}