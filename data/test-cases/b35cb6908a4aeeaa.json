{"uid":"b35cb6908a4aeeaa","name":"Validate the audit logs details for updating equipments details","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_update_equipments_validate_audit_logs_details","historyId":"7cc23ab26888cadecf2fb83b4c61d1c2","time":{"start":1733050266333,"stop":1733050266566,"duration":233},"description":"This test case test API to Validate the audit logs details for updating equipments details","descriptionHtml":"<p>This test case test API to Validate the audit logs details for updating equipments details</p>\n","status":"failed","statusMessage":"AssertionError: Expected '19.065038 sqcm' for old Surface Area, but got 19.065 sqcm\nassert '19.065 sqcm' == '19.065038 sqcm'\n  - 19.065038 sqcm\n  ?       ---\n  + 19.065 sqcm","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x00000280D204EE90>\n\n    @allure.title(\"Validate the audit logs details for updating equipments details\")\n    @allure.description(\"This test case test API to Validate the audit logs details for updating equipments details\")\n    @allure.link(\"https://app.clickup.com/t/86cvw6hqb\")\n    @pytest.mark.update_equipments_validate_audit_logs_details\n    def test_update_equipments_validate_audit_logs_details(self):\n        update_equipment = self.equipment.test_update_equipment_attribute()\n        equipment_detail = update_equipment[\"payload\"]\n        old_equipment_detail = update_equipment[\"equipment_detail\"]\n        time_stamp = update_equipment[\"timestamp\"]\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"Equipment\")\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"Equipment\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if action_exists and domain_is_additional_policy:\n>               self.validate_audit_logs.assert_audit_diff(audit_diff, \"Surface Area\",\n                                                           str(old_equipment_detail[\"surface_area_sqcm\"]) + \" sqcm\",\n                                                           str(equipment_detail[\"surfaceAreaValue\"]) + \" \" + (\n                                                               equipment_detail[\"surfaceAreaUnit\"]))\n\ntests\\scenarios\\audit_logs\\test_audit_logs_scenarios.py:761: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naudit_diff = {'Capacity': {'data': {'new': {'value': '261'}, 'old': {'value': None}}, 'type': 'updated'}, 'Equipment Groups': {'typ...'type': 'unchanged'}, 'ID': {'data': {'new': {'value': 'EQM-13'}, 'old': {'value': 'EQM-13'}}, 'type': 'updated'}, ...}\nkey = 'Surface Area', expected_old_value = '19.065038 sqcm', expected_new_value = '248 sqcm'\n\n    @staticmethod\n    def assert_audit_diff(audit_diff, key, expected_old_value, expected_new_value):\n        old_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"old\", {}).get(\"value\")\n        new_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"new\", {}).get(\"value\")\n    \n>       assert old_value == expected_old_value, f\"Expected '{expected_old_value}' for old {key}, but got {old_value}\"\nE       AssertionError: Expected '19.065038 sqcm' for old Surface Area, but got 19.065 sqcm\nE       assert '19.065 sqcm' == '19.065038 sqcm'\nE         - 19.065038 sqcm\nE         ?       ---\nE         + 19.065 sqcm\n\ntests\\unit\\audit_logs\\test_audit_logs.py:128: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1733050257392,"stop":1733050257678,"duration":286},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733050257678,"stop":1733050257885,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"update_equipments_validate_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"26520-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cvw6hqb","url":"https://app.clickup.com/t/86cvw6hqb","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"92ad71be3cfa260e","status":"passed","time":{"start":1733044487799,"stop":1733044488015,"duration":216}},{"uid":"87e4b06f1b9362cd","status":"passed","time":{"start":1732985076738,"stop":1732985076921,"duration":183}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","audit_logs_scenarios","update_equipments_validate_audit_logs_details","second_to_last","run(order=-2)"]},"source":"b35cb6908a4aeeaa.json","parameterValues":[]}