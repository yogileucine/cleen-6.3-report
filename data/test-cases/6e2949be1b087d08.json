{"uid":"6e2949be1b087d08","name":"Validate study inspection for bioburden residue verification details when new parameters are added","fullName":"tests.scenarios.configure_run_form_fields.test_configure_run_form_field.TestConfigureRunFormFieldsScenarios#test_validate_study_inspection_for_bioburden_residue_verification_details","historyId":"5ed1d2316ff9571071547fe39a29d5c3","time":{"start":1733046202320,"stop":1733046271790,"duration":69470},"description":"This test case test API to validate study inspection for bioburden residue verification details when new parameters are added using configure run form fields","descriptionHtml":"<p>This test case test API to validate study inspection for bioburden residue verification details when new parameters are added using configure run form fields</p>\n","status":"broken","statusMessage":"KeyError: 'locationId'","statusTrace":"self = <test_configure_run_form_field.TestConfigureRunFormFieldsScenarios object at 0x000002589CD5B090>\n\n    @allure.title(\"Validate study inspection for bioburden residue verification details when new parameters are \"\n                  \"added\")\n    @allure.description(\"This test case test API to validate study inspection for bioburden residue verification \"\n                        \"details when new parameters are added using configure run form fields\")\n    @allure.link(\"https://app.clickup.com/t/86cw4g12y\")\n    @pytest.mark.validate_study_inspection_for_bioburden_residue_verification_details\n    def test_validate_study_inspection_for_bioburden_residue_verification_details(self):\n        config_data = {\"configure_type\": \"bioburdenResidueVerification\",\n                       \"configure_filed_name\": const.CONFIG_ADD_NEW_PARAMETER,\n                       \"inspection_name\": const.PROTOCOL_BIOBURDEN}\n    \n        cleaning_config_id, payload, payload_details, inspection_details, protocol_equipment, inspection_data = (\n>           self.configure_run_form_fields.update_retrieve_assert_config(config_data))\n\ntests\\scenarios\\configure_run_form_fields\\test_configure_run_form_field.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\configure_run_form_field\\test_configure_run_form_fields.py:286: in update_retrieve_assert_config\n    inspection_details, payload = self.update_residue_inspection_detail(equipment_info, inspection_data,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests.unit.configure_run_form_field.test_configure_run_form_fields.TestConfigureRunFormFields object at 0x000002589CD5E3D0>\nequipment_info = [(58, 70), (59, 70), (62, 70), (64, 70), (61, 71)]\ninspection_data = {'case_study_id': 81, 'columns': ['sample type', 'sample id', 'swab_rinse_ppm', 'Rinse volume(ml)', 'rinse_limit_ppm',...pmentId': 61, 'productionId': 71, ...}, 'equipment_external_id': ['EQM-16', 'EQM-17', 'EQM-2', 'EQM-3', 'EQM-19'], ...}\nget_inspection = {'closedWithException': False, 'conclusion': '', 'createdOn': '2024-12-01T09:44:31.471Z', 'exceptionReason': None, ...}\nconfig_data = {'configure_filed_name': ['DATE', 'DATE_TIME', 'USERS_LIST', 'NUMBER', 'SINGLE_LINE_TEXT', 'YES_OR_NO', ...], 'configure_type': 'bioburdenResidueVerification', 'inspection_name': 'bioburden'}\nprotocol_equipment = {'actives_verification': True, 'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'exte... 'name': 'Protocol-JMKF', ...}, 'additional_test': 'Conductivity', 'at_verification': 'conductivity_verification', ...}\n\n    def update_residue_inspection_detail(self, equipment_info, inspection_data, get_inspection, config_data,\n                                         protocol_equipment):\n        payload_details = None\n        payload = None\n        for i in range(len(equipment_info)):\n            inspection_data.update({\"inspection_id\": get_inspection[\"inspections\"][i][\"id\"]})\n            inspection = self.multi_production_inspection.get_inspection_detail(inspection_data)[\"response\"]\n            inspection = json.loads(inspection)[\"result\"]\n            if inspection[config_data.get(\"inspection_name\")] is not None:\n                protocol_equipment.update({\"visual_location\": get_inspection[\"inspections\"][i][\"visual\"][\"locations\"]})\n                protocol_equipment.update({\"inspection_type\": inspection[config_data[\"inspection_name\"]]})\n    \n            if inspection[config_data[\"inspection_name\"]] is None:\n                continue\n    \n            for j in range(len(inspection[config_data[\"inspection_name\"]][\"residues\"])):\n    \n                if config_data[\"configure_type\"] == \"cleaningAgentResidueVerification\":\n                    inspection_data.update(\n                        {\"residue_id\": inspection[config_data[\"inspection_name\"]][\"residues\"][j][\"cleaningAgentId\"]})\n                if config_data[\"configure_type\"] == \"activeResidueVerification\":\n                    inspection_data.update(\n                        {\"residue_id\": inspection[config_data[\"inspection_name\"]][\"residues\"][j][\"apiId\"]})\n                if config_data[\"configure_type\"] == \"nitrosamineResidueVerification\":\n                    inspection_data.update(\n                        {\"residue_id\": inspection[config_data[\"inspection_name\"]][\"residues\"][j][\"nsId\"]})\n    \n                if config_data[\"configure_type\"] == \"bioburdenResidueVerification\":\n                    bioburden_data = self.multi_production_inspection.get_bioburden_inspection_details(inspection_data)[\n                        \"response\"]\n                    bioburden_data = json.loads(bioburden_data)\n                    bioburden_residue = inspection[\"bioburden\"][\"residues\"][j][\"bioburden\"]\n                    protocol_equipment.update({\"residue_data\": bioburden_residue,\n                                               \"bioburden_inspection_data\": bioburden_data[\"result\"][j]})\n    \n                    payload = update_residue_inspection_payload(protocol_equipment)\n                    inspection_data.update(\n                        {\"location_id\": bioburden_residue[\"locationId\"],\n                         \"sample_id\": bioburden_residue[\"sampleId\"],\n                         \"update_inspection_payload\": update_residue_inspection_payload(protocol_equipment),\n                         \"inspection_api\": const.PROTOCOL_BIOBURDEN})\n    \n                if config_data[\"configure_type\"] == \"bacterialResidueVerification\":\n                    bioburden_data = self.multi_production_inspection.get_bioburden_inspection_details(inspection_data)[\n                        \"response\"]\n                    bioburden_data = json.loads(bioburden_data)\n                    bioburden_residue = inspection[\"bioburden\"][\"residues\"][j][\"bacterial\"]\n                    protocol_equipment.update({\"residue_data\": bioburden_residue,\n                                               \"bacterial_fungal_inspection_data\": bioburden_data[\"result\"][j]})\n                    inspection_data.update(\n                        {\"location_id\": bioburden_residue[\"locationId\"],\n                         \"sample_id\": bioburden_residue[\"sampleId\"],\n                         \"update_inspection_payload\": update_residue_inspection_payload(protocol_equipment),\n                         \"inspection_api\": const.PROTOCOL_BIOBURDEN})\n    \n                if config_data[\"configure_type\"] == \"fungalResidueVerification\":\n                    bioburden_data = self.multi_production_inspection.get_bioburden_inspection_details(inspection_data)[\n                        \"response\"]\n                    bioburden_data = json.loads(bioburden_data)\n                    bioburden_residue = inspection[\"bioburden\"][\"residues\"][j][\"fungal\"]\n                    protocol_equipment.update({\"residue_data\": bioburden_residue,\n                                               \"bacterial_fungal_inspection_data\": bioburden_data[\"result\"][j]})\n                    inspection_data.update(\n                        {\"location_id\": bioburden_residue[\"locationId\"],\n                         \"sample_id\": bioburden_residue[\"sampleId\"],\n                         \"update_inspection_payload\": update_residue_inspection_payload(protocol_equipment),\n                         \"inspection_api\": const.PROTOCOL_BIOBURDEN})\n    \n                if config_data.get(\"config_name\") == \"microbial\":\n                    microbial_data = self.multi_production_inspection.get_bioburden_inspection_details(inspection_data)[\n                        \"response\"]\n                    microbial_data = json.loads(microbial_data)\n                    if config_data[\"configure_type\"] == \"bacterialResidueVerification\":\n                        microbial_residue = inspection[\"microbial\"][\"residues\"][j][\"bacterial\"]\n                        protocol_equipment.update({\"residue_data\": microbial_residue,\n                                                   \"bacterial_fungal_inspection_data\": microbial_data[\"result\"][j]})\n    \n                        payload = update_residue_inspection_payload(protocol_equipment)\n                        inspection_data.update(\n                            {\"location_id\": microbial_residue[\"locationId\"],\n                             \"sample_id\": microbial_residue[\"sampleId\"],\n                             \"update_inspection_payload\": update_residue_inspection_payload(protocol_equipment),\n                             \"inspection_api\": const.PROTOCOL_MICROBIAL})\n    \n                    elif config_data[\"configure_type\"] == \"fungalResidueVerification\":\n                        microbial_residue = inspection[\"microbial\"][\"residues\"][j][\"fungal\"]\n                        protocol_equipment.update({\"residue_data\": microbial_residue,\n                                                   \"bacterial_fungal_inspection_data\": microbial_data[\"result\"][j]})\n    \n                        payload = update_residue_inspection_payload(protocol_equipment)\n                        inspection_data.update(\n                            {\"location_id\": microbial_residue[\"locationId\"],\n                             \"sample_id\": microbial_residue[\"sampleId\"],\n                             \"update_inspection_payload\": update_residue_inspection_payload(protocol_equipment),\n                             \"inspection_api\": const.PROTOCOL_MICROBIAL})\n    \n                    else:\n                        microbial_residue = inspection[\"microbial\"][\"residues\"][j][\"bioburden\"]\n                        protocol_equipment.update({\"residue_data\": microbial_residue,\n                                                   \"bioburden_inspection_data\": microbial_data[\"result\"][j]})\n    \n                        payload = update_residue_inspection_payload(protocol_equipment)\n                        inspection_data.update(\n                            {\"location_id\": microbial_residue[\"locationId\"],\n                             \"sample_id\": microbial_residue[\"sampleId\"],\n                             \"update_inspection_payload\": update_residue_inspection_payload(protocol_equipment),\n                             \"inspection_api\": const.PROTOCOL_MICROBIAL})\n                else:\n    \n                    if config_data[\"configure_type\"] == \"bacterialResidueVerification\":\n                        inspection_data.update(\n                            {\"location_id\": inspection[config_data[\"inspection_name\"]][\"residues\"][j][\"bacterial\"][\n                                \"locationId\"],\n                             \"sample_id\": inspection[config_data[\"inspection_name\"]][\"residues\"][j][\"bacterial\"][\n                                 \"sampleId\"]})\n    \n                    elif config_data[\"configure_type\"] == \"fungalResidueVerification\":\n                        inspection_data.update(\n                            {\"location_id\": inspection[config_data[\"inspection_name\"]][\"residues\"][j][\"fungal\"][\n                                \"locationId\"],\n                             \"sample_id\": inspection[config_data[\"inspection_name\"]][\"residues\"][j][\"fungal\"][\n                                 \"sampleId\"]})\n    \n                    else:\n                        inspection_data.update(\n>                           {\"location_id\": inspection[config_data[\"inspection_name\"]][\"residues\"][j][\"locationId\"],\n                             \"sample_id\": inspection[config_data[\"inspection_name\"]][\"residues\"][j][\"sampleId\"]})\nE                       KeyError: 'locationId'\n\ntests\\unit\\configure_run_form_field\\test_configure_run_form_fields.py:213: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733045831267,"stop":1733045831537,"duration":270},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733045831537,"stop":1733045831677,"duration":140},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_study_inspection_for_bioburden_residue_verification_details"},{"name":"tag","value":"configure_run_form_fields_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.configure_run_form_fields"},{"name":"suite","value":"test_configure_run_form_field"},{"name":"subSuite","value":"TestConfigureRunFormFieldsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"24432-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.configure_run_form_fields.test_configure_run_form_field"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cw4g12y","url":"https://app.clickup.com/t/86cw4g12y","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","configure_run_form_fields_scenarios","validate_study_inspection_for_bioburden_residue_verification_details"]},"source":"6e2949be1b087d08.json","parameterValues":[]}