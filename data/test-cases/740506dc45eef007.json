{"uid":"740506dc45eef007","name":"Select only one equipment entities from each production","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_select_at_least_one_equipment_entities_multi_production_protocol","historyId":"96783292b500b59d391b66bff4908fb2","time":{"start":1732987732360,"stop":1732987733733,"duration":1373},"description":"This test case tests API to select only one equipment entities from each productionmulti-production protocol","descriptionHtml":"<p>This test case tests API to select only one equipment entities from each productionmulti-production protocol</p>\n","status":"broken","statusMessage":"IndexError: pop from empty list","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000001B7CC455B10>\n\n    @allure.title(\"Select only one equipment entities from each production\")\n    @allure.description(\"This test case tests API to select only one equipment entities from each production\"\n                        \"multi-production protocol\")\n    @allure.link(\"https://app.clickup.com/t/86cu5hc3e\")\n    @pytest.mark.select_at_least_one_equipment_entities_multi_production_protocol\n    def test_select_at_least_one_equipment_entities_multi_production_protocol(self):\n        protocol_data = self.protocol_common_method.protocol_excel_read_data()\n        protocol_detail, data = self.setup_protocol(protocol_data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n        self.protocol_equipment.PROTOCOL_EQUIPMENT = json.loads(get_equipment)\n        data.update({\"disable_eq\": True})\n        get_equipment_id = self.protocol_equipment.get_equipment_protocol_id(data)\n        get_equipment_id = list(set(get_equipment_id))\n        print(get_equipment_id)\n        data.update({\"disable_equipment_ids\": get_equipment_id, \"disable_all\": False})\n>       data.update({\"update_equipment_entities_payload\": update_equipment_entities(data)})\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_prodcution_protocol.py:939: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'externalId': 'Protocol-L0FK', 'name': 'Protocol-L0FK', ...}, 'description': 'Automation Protocol', 'disable_all': False, 'disable_eq': True, ...}\n\n    def update_equipment_entities(data):\n        disable_equipment_list = []\n        enable_equipment_list = []\n    \n        enable_equipment_ids = data.get(\"enable_equipment_ids\", [])\n        disable_equipment_ids = data.get(\"disable_equipment_ids\", [])\n        print(f\"Enable Equipment IDs: {disable_equipment_ids}\")\n    \n        for production_id in data.get(\"production_id\", []):\n            if data[\"disable_all\"]:\n                for disable_id in disable_equipment_ids:\n                    disable_equipment_name = f\"equipment_{disable_id}_{production_id}\"\n                    disable_equipment_list.append(disable_equipment_name)\n            else:\n                print(f\"Disable Equipment IDs: {disable_equipment_ids}\")\n>               disable_id = disable_equipment_ids.pop(0)\nE               IndexError: pop from empty list\n\npayload\\facility\\protocol_payload\\on_demand_protocol_payload.py:48: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1732987731559,"stop":1732987732109,"duration":550},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1732987732109,"stop":1732987732360,"duration":251},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"select_at_least_one_equipment_entities_multi_production_protocol"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"17272-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cu5hc3e","url":"https://app.clickup.com/t/86cu5hc3e","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["select_at_least_one_equipment_entities_multi_production_protocol","multi_production_protocol","scenario"]},"source":"740506dc45eef007.json","parameterValues":[]}