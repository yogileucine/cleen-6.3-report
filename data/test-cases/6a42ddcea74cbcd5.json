{"uid":"6a42ddcea74cbcd5","name":"Validate the audit logs details for add new product to master data","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_add_master_data_product_audit_logs_details","historyId":"6fd3dfb937738118d191fc947ef353ef","time":{"start":1732985077773,"stop":1732985077955,"duration":182},"description":"This test case test API to Validate the audit logs details for add new product to master data","descriptionHtml":"<p>This test case test API to Validate the audit logs details for add new product to master data</p>\n","status":"failed","statusMessage":"AssertionError: Expected '1 mg' for new Strength (Active-Auto-A1EM9), but got 1000 ug\nassert '1000 ug' == '1 mg'\n  - 1 mg\n  + 1000 ug","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x000001CD0721D090>\n\n    @allure.title(\"Validate the audit logs details for add new product to master data\")\n    @allure.description(\"This test case test API to Validate the audit logs details for add new product to master data\")\n    @allure.link(\"https://app.clickup.com/t/86cvyv1a2\")\n    @pytest.mark.validate_add_master_data_product_audit_logs_details\n    def test_validate_add_master_data_product_audit_logs_details(self):\n        master_data = self.master_data_products.test_add_product_master_data_details()\n        master_data_detail = master_data[\"payload\"]\n        time_stamp = master_data[\"timestamp\"]\n        active_name = master_data[\"active_name\"]\n        table_weight = master_data_detail['tabletWeight']\n        ldd = master_data_detail['ldd']\n    \n        additional_fields = master_data_detail['additionalFields']\n    \n        cleanabilityAF_values = [field[\"value\"] for field in additional_fields if field[\"key\"] == \"cleanabilityAF\"]\n        productCategoryAF_values = [field[\"value\"] for field in additional_fields if\n                                    field[\"key\"] == \"productCategoryAF\"]\n        formulationAF_values = [field[\"value\"] for field in additional_fields if field[\"key\"] == \"formulationAF\"]\n        strength = master_data_detail['apis'][0]['strength']\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"Product\",\n                                                                         action=const.LOG_ACTION_ADD)\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"Product\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if action_exists and domain_is_additional_policy:\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Apis\", const.NONE_VALUE, active_name)\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Cleanability AF\", None,\n                                                           str(cleanabilityAF_values[0]))\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Formulation AF\", None,\n                                                           str(formulationAF_values[0]))\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Ldd\", None,\n                                                           str(ldd[\"value\"]) + \" \" + ldd[\"unit\"])\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Name\", None, master_data_detail[\"name\"])\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Product Category AF\", None,\n                                                           str(productCategoryAF_values[0]))\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Product Id\", None,\n                                                           master_data_detail[\"product_id\"])\n                self.validate_audit_logs.assert_audit_diff(audit_diff, \"Unit Weight\", None,\n                                                           str(table_weight[\"value\"]) + \" \" + table_weight[\"unit\"])\n>               self.validate_audit_logs.assert_audit_diff(audit_diff, f\"Strength ({active_name})\", None,\n                                                           str(strength[\"value\"]) + \" \" + strength[\"unit\"])\n\ntests\\scenarios\\audit_logs\\test_audit_logs_scenarios.py:1047: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naudit_diff = {'Apis': {'data': {'new': {'value': 'Active-Auto-A1EM9'}, 'old': {'value': '-'}}, 'type': 'updated'}, 'Cleanability AF..., 'ID': {'data': {'new': {'value': 'product_id-VXTJE'}, 'old': {'value': 'product_id-VXTJE'}}, 'type': 'updated'}, ...}\nkey = 'Strength (Active-Auto-A1EM9)', expected_old_value = None, expected_new_value = '1 mg'\n\n    @staticmethod\n    def assert_audit_diff(audit_diff, key, expected_old_value, expected_new_value):\n        old_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"old\", {}).get(\"value\")\n        new_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"new\", {}).get(\"value\")\n    \n        assert old_value == expected_old_value, f\"Expected '{expected_old_value}' for old {key}, but got {old_value}\"\n>       assert new_value == expected_new_value, f\"Expected '{expected_new_value}' for new {key}, but got {new_value}\"\nE       AssertionError: Expected '1 mg' for new Strength (Active-Auto-A1EM9), but got 1000 ug\nE       assert '1000 ug' == '1 mg'\nE         - 1 mg\nE         + 1000 ug\n\ntests\\unit\\audit_logs\\test_audit_logs.py:129: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1732974915848,"stop":1732974916198,"duration":350},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1732974916198,"stop":1732974916326,"duration":128},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_add_master_data_product_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"22492-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cvyv1a2","url":"https://app.clickup.com/t/86cvyv1a2","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_add_master_data_product_audit_logs_details","scenario","audit_logs_scenarios","second_to_last","run(order=-2)"]},"source":"6a42ddcea74cbcd5.json","parameterValues":[]}