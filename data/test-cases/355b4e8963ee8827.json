{"uid":"355b4e8963ee8827","name":"Validate the absent on sample limits of Inspection bioburden Endotoxin residue verification when select zero in microbial policy for rinse & non split","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol#test_validate_bioburden_residue_swab_rinse_limits_absent_zero_non_split_inspection","historyId":"66303919076623a3129522bbf862b62e","time":{"start":1732989107791,"stop":1732989114229,"duration":6438},"description":"This test case tests API to Validate the absent on sample limits of Inspection bioburden Endotoxin residue verification when select zero in microbial policy for rinse & non split","descriptionHtml":"<p>This test case tests API to Validate the absent on sample limits of Inspection bioburden Endotoxin residue verification when select zero in microbial policy for rinse &amp; non split</p>\n","status":"broken","statusMessage":"KeyError: 'protocol_eq'","statusTrace":"self = <test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol object at 0x000001CF352B9610>\n\n    @allure.title(\"Validate the absent on sample limits of Inspection bioburden Endotoxin residue verification when \"\n                  \"select zero in microbial policy for rinse & non split\")\n    @allure.description(\n        \"This test case tests API to Validate the absent on sample limits of Inspection bioburden Endotoxin \"\n        \"residue verification when select zero in microbial policy for rinse & non split\")\n    @allure.link(\"https://app.clickup.com/t/86cuuz871\")\n    @pytest.mark.formulation  # bop = based on policy\n    @pytest.mark.validate_bioburden_residue_swab_rinse_limits_absent_zero_non_split_inspection\n    def test_validate_bioburden_residue_swab_rinse_limits_absent_zero_non_split_inspection(self):\n>       protocol = self.test_validate_bioburden_endotoxin_residue_swab_rinse_sample_limits_absent_zero_non_split()\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:1360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:937: in test_validate_bioburden_endotoxin_residue_swab_rinse_sample_limits_absent_zero_non_split\n    data = self.test_bioburden_endotoxin_protocol_swab_rinse_absent_zero_non_split()\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:572: in test_bioburden_endotoxin_protocol_swab_rinse_absent_zero_non_split\n    data, updated_data = self.protocol_bioburden_helper(policy_data)\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:172: in protocol_bioburden_helper\n    equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'externalId': 'Protocol-O54N', 'name': 'Protocol-O54N', ...}, 'bioburden_verification': True, 'description': 'Automation Protocol', 'disable_eq': True, ...}\n\n    @staticmethod\n    def get_protocol_equipments_ids(data):\n        equipment_ids = []\n    \n>       for entry in data[\"protocol_eq\"][\"result\"]:\nE       KeyError: 'protocol_eq'\n\ntests\\unit\\protocols\\protocol_common_method.py:165: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1732989107248,"stop":1732989107551,"duration":303},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1732989107551,"stop":1732989107789,"duration":238},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_bioburden_residue_swab_rinse_limits_absent_zero_non_split_inspection"},{"name":"tag","value":"formulation"},{"name":"tag","value":"microbial_multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_production_protocol_microbial_policy_absent"},{"name":"subSuite","value":"TestMicrobialMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"22748-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuuz871","url":"https://app.clickup.com/t/86cuuz871","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","formulation","validate_bioburden_residue_swab_rinse_limits_absent_zero_non_split_inspection","microbial_multi_production_protocol"]},"source":"355b4e8963ee8827.json","parameterValues":[]}