{"uid":"cf88ad48a79dc198","name":"Validate the audit logs details for change assessment","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_change_assessment_audit_logs_details","historyId":"cd5d40efe2415b15b9b84e9c64ae38ba","time":{"start":1733030166655,"stop":1733030172370,"duration":5715},"description":"This test case test API to validate the audit logs details for change assessment","descriptionHtml":"<p>This test case test API to validate the audit logs details for change assessment</p>\n","status":"broken","statusMessage":"TypeError: TestAuditLogs.assert_audit_diff() missing 1 required positional argument: 'expected_new_value'","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x000001C40F44CED0>\n\n    @allure.title(\"Validate the audit logs details for change assessment\")\n    @allure.description(\"This test case test API to validate the audit logs details for change assessment\")\n    @allure.link(\"https://app.clickup.com/t/86cw30ey6\")\n    @allure.link(\"https://app.clickup.com/t/86cw30f6a\")\n    @allure.link(\"https://app.clickup.com/t/86cw30fgt\")\n    @pytest.mark.validate_change_assessment_audit_logs_details\n    def test_validate_change_assessment_audit_logs_details(self):\n        login_executed = False\n        logout_executed = False\n        car_review_log = False\n        car_approve_log = False\n        lwc_review_log = False\n        lwc_approve_log = False\n        lwc_submit_log = False\n        car_submit_log = False\n        self.production.test_edit_production_attribute()\n        self.change_assessment.test_start_cleaning_assessment()\n        report_id = self.change_assessment.test_get_cleaning_assessment()[\"response\"]\n        report_id = len(json.loads(report_id)[\"cleaningEvaluation\"])\n        report_id = f\"CE{report_id}\"\n        time_stamp = datetime.utcnow().isoformat()\n        expected_audit_log_msg = f\"User performed a Change Assessment: CE1 (ID: {report_id})\"\n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"FacilityCleaningEvaluation\",\n                                                                         action=const.LOG_ACTION_GENERATE)\n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"FacilityCleaningEvaluation\"\n            actual_audit_log_msg = result.get(\"details\", {}).get(\"details\")\n    \n            if action_exists and domain_is_additional_policy:\n                self.validate_audit_logs.validate_message(actual_audit_log_msg, expected_audit_log_msg)\n                self.validate_audit_logs.updated_policy_time_stamp(time_stamp, response_time_stamp)\n                break\n    \n        self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"ReportDocument\",\n                                                                         action=const.SIGN_DOCUMENT)\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            action_exists = result.get(\"action\")\n    \n            actual_audit_log_msg = result.get(\"details\", {})\n            submitter = result.get(\"user\")[\"email\"]\n    \n            document_type = actual_audit_log_msg.get(\"details\", {}).get(\"document\", {}).get(\"documentType\")\n    \n            doc_type = document_type if actual_audit_log_msg and document_type is not None else None\n    \n            domain_is_additional_policy = result.get(\"domain\") == \"UserSession\"\n    \n            if not login_executed and action_exists == const.LOG_LOGIN and domain_is_additional_policy:\n                response_time_stamp = result.get(\"timestamp\")\n>               self.validate_audit_logs.assert_audit_diff(result.get(\"details\", {}).get(\"new\", {}), \"email\",\n                                                               Env.get_env_data(\"ADMIN_USERNAME\"))\nE               TypeError: TestAuditLogs.assert_audit_diff() missing 1 required positional argument: 'expected_new_value'\n\ntests\\scenarios\\audit_logs\\test_audit_logs_scenarios.py:2425: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733030166130,"stop":1733030166464,"duration":334},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733030166464,"stop":1733030166655,"duration":191},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_change_assessment_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"26328-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cw30fgt","url":"https://app.clickup.com/t/86cw30fgt","type":"link"},{"name":"https://app.clickup.com/t/86cw30f6a","url":"https://app.clickup.com/t/86cw30f6a","type":"link"},{"name":"https://app.clickup.com/t/86cw30ey6","url":"https://app.clickup.com/t/86cw30ey6","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","audit_logs_scenarios","validate_change_assessment_audit_logs_details","second_to_last","run(order=-2)"]},"source":"cf88ad48a79dc198.json","parameterValues":[]}