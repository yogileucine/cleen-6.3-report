{"uid":"7cbf3de8852b43e6","name":"Validate the audit logs details for when update offline study","fullName":"tests.scenarios.audit_logs.test_audit_logs_scenarios.TestAuditLogsScenarios#test_validate_update_offline_study_audit_logs_details","historyId":"aab0c3c6b730e6d08ea44324126ac48d","time":{"start":1734439015482,"stop":1734439015936,"duration":454},"description":"This test case test API to validate the audit logs details for when update offline study","descriptionHtml":"<p>This test case test API to validate the audit logs details for when update offline study</p>\n","status":"failed","statusMessage":"AssertionError: Expected '' for old Reference Documents, but got None\nassert None == ''","statusTrace":"self = <test_audit_logs_scenarios.TestAuditLogsScenarios object at 0x7f81c3d16b40>\n\n    @allure.title(\"Validate the audit logs details for when update offline study\")\n    @allure.description(\"This test case test API to validate the audit logs details for when update offline study\")\n    @allure.link(\"https://app.clickup.com/t/86cw11v01\")\n    @pytest.mark.validate_update_offline_study_audit_logs_details\n    def test_validate_update_offline_study_audit_logs_details(self):\n        data = {\"study_name\": \"Offline Study \" + generate_random_name(), \"study_id\": None,\n                \"offline_id\": \"Off-id-\" + generate_random_name(),\n                \"offline_proto\": \"Pro-\" + generate_random_name(), \"study_type\": \"periodicVerification\"}\n        self.offline_study.test_add_new_offline_study(data)\n    \n        updated_offline_study = self.offline_study.test_update_offline_study_details(data)\n        time_stamp = updated_offline_study[\"timestamp\"]\n    \n        audit_logs_details = self.validate_audit_logs.audit_logs_details(policy_name=\"OfflineStudy\",\n                                                                         action=const.LOG_ACTION_MODIFY)\n    \n        for index, result in enumerate(audit_logs_details.get(\"audit_logs\", {}).get(\"result\", [])):\n            response_time_stamp = result.get(\"timestamp\")\n            action_exists = result.get(\"action\") is not None\n            domain_is_additional_policy = result.get(\"domain\") == \"OfflineStudy\"\n            audit_diff = result.get(\"diff\", {})\n    \n            if action_exists and domain_is_additional_policy:\n>               self.validate_audit_logs.assert_audit_diff(audit_diff, \"Reference Documents\", \"\", \"offline_2.pdf\")\n\ntests/scenarios/audit_logs/test_audit_logs_scenarios.py:1767: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.audit_logs.test_audit_logs.TestAuditLogs object at 0x7f81c47e0890>\naudit_diff = {'ID': {'data': {'new': {'value': 'Off-id-GZ06I'}, 'old': {'value': 'Off-id-GZ06I'}}, 'type': 'updated'}, 'Reference Documents': {'data': {'new': {'value': 'offline_2.pdf'}}, 'type': 'created'}}\nkey = 'Reference Documents', expected_old_value = '', expected_new_value = 'offline_2.pdf'\n\n    def assert_audit_diff(self, audit_diff, key, expected_old_value, expected_new_value):\n        old_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"old\", {}).get(\"value\")\n        new_value = audit_diff.get(key, {}).get(\"data\", {}).get(\"new\", {}).get(\"value\")\n    \n        if isinstance(expected_old_value, datetime) or isinstance(expected_new_value, datetime):\n            self.get_diff_time_stamp(old_value, expected_old_value)\n    \n>       assert old_value == expected_old_value, f\"Expected '{expected_old_value}' for old {key}, but got {old_value}\"\nE       AssertionError: Expected '' for old Reference Documents, but got None\nE       assert None == ''\n\ntests/unit/audit_logs/test_audit_logs.py:130: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1734429604694,"stop":1734429605014,"duration":320},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1734429605014,"stop":1734429605194,"duration":180},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_update_offline_study_audit_logs_details"},{"name":"tag","value":"run(order=-2)"},{"name":"tag","value":"second_to_last"},{"name":"tag","value":"audit_logs_scenarios"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.audit_logs"},{"name":"suite","value":"test_audit_logs_scenarios"},{"name":"subSuite","value":"TestAuditLogsScenarios"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"1892009-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.audit_logs.test_audit_logs_scenarios"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cw11v01","url":"https://app.clickup.com/t/86cw11v01","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","validate_update_offline_study_audit_logs_details","audit_logs_scenarios","second_to_last","run(order=-2)"]},"source":"7cbf3de8852b43e6.json","parameterValues":[]}