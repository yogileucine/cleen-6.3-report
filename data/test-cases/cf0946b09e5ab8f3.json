{"uid":"cf0946b09e5ab8f3","name":"Verify study inspection when nitrosamine policy is Disabled","fullName":"tests.scenarios.disable_nitrosamine.test_disable_nitrosamine_policy.TestDisableNitrosamine#test_disable_nitrosamine_policy_study_inspection","historyId":"930c16c944685b01efd9c2c3ed2e1e9e","time":{"start":1733046164649,"stop":1733046194084,"duration":29435},"description":"This test case tests API to verify that after nitrosamine policy is disabled, there should be no nitrosamine in study inspection","descriptionHtml":"<p>This test case tests API to verify that after nitrosamine policy is disabled, there should be no nitrosamine in study inspection</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"MinimumOneRowNeededOnDemandVerification\",\"where\":{\"domain\":\"OnDemandProtocol\",\"action\":\"Get\"},\"name\":\"nitrosamines_direct\",\"message\":\"No equipment available (Direct or Indirect) for the selected verification. Please update the verification, or select an equipment from the list\",\"action\":\"Get\",\"domain\":\"OnDemandProtocol\"}}","statusTrace":"self = <test_disable_nitrosamine_policy.TestDisableNitrosamine object at 0x0000026E9DC3DDD0>\n\n    @allure.title(\"Verify study inspection when nitrosamine policy is Disabled\")\n    @allure.description(\"This test case tests API to verify that after nitrosamine policy is disabled, \"\n                        \"there should be no nitrosamine in study inspection\")\n    @allure.link(\"https://app.clickup.com/t/86cw39ud8\")\n    @pytest.mark.disable_nitrosamine_policy_study_inspection\n    def test_disable_nitrosamine_policy_study_inspection(self):\n        const.DISABLE_NITROSAMINE_POLICY = True\n>       inspection_data, equipment_info, protocol_equipment = self.inspection.inspection_setup()\n\ntests\\scenarios\\disable_nitrosamine\\test_disable_nitrosamine_policy.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\scenarios\\multi_production_protocol\\inspection\\test_multi_production_protocol_inspection.py:33: in inspection_setup\n    protocol_equipment = self.multi_production_protocol_scenario.test_submit_protocol_to_review_approve()\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_prodcution_protocol.py:4155: in test_submit_protocol_to_review_approve\n    return self.protocol_review_approve_method()\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_prodcution_protocol.py:455: in protocol_review_approve_method\n    self.protocol_common_method.get_validate_protocol_details(data)\ntests\\unit\\protocols\\protocol_common_method.py:124: in get_validate_protocol_details\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"MinimumOneRowNeededOnDemandVerification\",\"where\":{\"domain\":\"OnDemandProtocol\",\"action\":\"Get\"},\"name\":\"nitrosamines_direct\",\"message\":\"No equipment available (Direct or Indirect) for the selected verification. Please update the verification, or select an equipment from the list\",\"action\":\"Get\",\"domain\":\"OnDemandProtocol\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1733046137332,"stop":1733046137659,"duration":327},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733046137659,"stop":1733046137832,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"This method will disable the nitrosamine policy","time":{"start":1733046137832,"stop":1733046151477,"duration":13645},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"disable_nitrosamine_policy_study_inspection"},{"name":"tag","value":"disable_nitrosamine"},{"name":"tag","value":"order('first')"},{"name":"parentSuite","value":"tests.scenarios.disable_nitrosamine"},{"name":"suite","value":"test_disable_nitrosamine_policy"},{"name":"subSuite","value":"TestDisableNitrosamine"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"6912-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.disable_nitrosamine.test_disable_nitrosamine_policy"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cw39ud8","url":"https://app.clickup.com/t/86cw39ud8","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["disable_nitrosamine_policy_study_inspection","disable_nitrosamine","order('first')"]},"source":"cf0946b09e5ab8f3.json","parameterValues":[]}